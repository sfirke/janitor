[{"path":[]},{"path":"https://sfirke.github.io/janitor/CONTRIBUTING.html","id":"please-contribute","dir":"","previous_headings":"","what":"Please contribute!","title":"CONTRIBUTING","text":"love collaboration.","code":""},{"path":"https://sfirke.github.io/janitor/CONTRIBUTING.html","id":"bugs-feature-requests","dir":"","previous_headings":"","what":"Bugs? Feature requests?","title":"CONTRIBUTING","text":"Submit issue issues page","code":""},{"path":"https://sfirke.github.io/janitor/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"prefer discussion unsolicited code contribution, .e., pull request. ensures effort wasted ’re aligned improve janitor package. especially true proposed contribution match currently open issue. ’s case, please open new issue(s) discussion , prior submitting code. proposed contribution addresses multiple issues, ideally broken multiple pull requests. make easier review approve.","code":""},{"path":"https://sfirke.github.io/janitor/CONTRIBUTING.html","id":"the-mechanics-of-contributing","dir":"","previous_headings":"Code contributions","what":"The mechanics of contributing:","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/janitor.git Make sure track progress upstream (.e., version janitor sfirke/janitor) git remote add upstream https://github.com/sfirke/janitor.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request master branch sfirke/janitor","code":""},{"path":"https://sfirke.github.io/janitor/CONTRIBUTING.html","id":"prefer-to-discuss-over-email","dir":"","previous_headings":"","what":"Prefer to discuss over email?","title":"CONTRIBUTING","text":"Email Sam. email address DESCRIPTION file repo.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"major-functions","dir":"Articles","previous_headings":"","what":"Major functions","title":"Overview of janitor functions","text":"Functions everyday use.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"clean-data-frame-names-with-clean_names","dir":"Articles","previous_headings":"Major functions > Cleaning","what":"Clean data.frame names with clean_names()","title":"Overview of janitor functions","text":"Call function every time read data. works %>% pipeline handles problematic variable names, especially well-preserved readxl::read_excel() readr::read_csv(). Default snake_case, cases like camelCase available Handles special characters spaces, including transliterating characters like œ oe. Appends numbers duplicated names Converts “%” “percent” “#” “number” retain meaning Spacing (lack thereof) around numbers preserved Clean variable names, returning data.frame: Compare base R produces: function powered underlying exported function make_clean_names(), accepts returns character vector names (see ). allows cleaning names object, just data.frame. clean_names() retained convenience piped workflows, can called sf simple features object tbl_graph tidygraph object addition data.frame.","code":"# Create a data.frame with dirty names test_df <- as.data.frame(matrix(ncol = 6)) names(test_df) <- c(   \"firstName\", \"ábc@!*\", \"% successful (2009)\",   \"REPEAT VALUE\", \"REPEAT VALUE\", \"\" ) test_df %>%   clean_names() #>   first_name abc percent_successful_2009 repeat_value repeat_value_2  x #> 1         NA  NA                      NA           NA             NA NA make.names(names(test_df)) #> [1] \"firstName\"            \"ábc...\"               \"X..successful..2009.\" #> [4] \"REPEAT.VALUE\"         \"REPEAT.VALUE\"         \"X\""},{"path":[]},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"check-with-compare_df_cols","dir":"Articles","previous_headings":"Major functions > Cleaning > Do those data.frames actually contain the same columns?","what":"Check with compare_df_cols()","title":"Overview of janitor functions","text":"cases given set data files identical, wish read combine analysis. dplyr::bind_rows() rbind() fails, different columns column classes don’t match across data.frames. compare_df_cols() takes unquoted names data.frames / tibbles, list data.frames, returns summary compare. See column types , missing present different inputs, column types differ. compare_df_cols_same() returns TRUE FALSE indicating data.frames can successfully row-bound given binding method:","code":"df1 <- data.frame(a = 1:2, b = c(\"big\", \"small\")) df2 <- data.frame(a = 10:12, b = c(\"medium\", \"small\", \"big\"), c = 0, stringsAsFactors = TRUE) # here, column b is a factor df3 <- df1 %>%   dplyr::mutate(b = as.character(b))  compare_df_cols(df1, df2, df3) #>   column_name       df1     df2       df3 #> 1           a   integer integer   integer #> 2           b character  factor character #> 3           c      <NA> numeric      <NA>  compare_df_cols(df1, df2, df3, return = \"mismatch\") #>   column_name       df1    df2       df3 #> 1           b character factor character compare_df_cols(df1, df2, df3, return = \"mismatch\", bind_method = \"rbind\") # default is dplyr::bind_rows #>   column_name       df1     df2       df3 #> 1           b character  factor character #> 2           c      <NA> numeric      <NA> compare_df_cols_same(df1, df3) #> [1] TRUE compare_df_cols_same(df2, df3) #>   column_name    ..1       ..2 #> 1           b factor character #> [1] FALSE"},{"path":[]},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"tabyl---a-better-version-of-table","dir":"Articles","previous_headings":"Major functions > Exploring","what":"tabyl() - a better version of table()","title":"Overview of janitor functions","text":"tabyl() tidyverse-oriented replacement table(). counts combinations one, two, three variables, can formatted suite adorn_* functions look just want. instance: Learn tabyls vignette.","code":"mtcars %>%   tabyl(gear, cyl) %>%   adorn_totals(\"col\") %>%   adorn_percentages(\"row\") %>%   adorn_pct_formatting(digits = 2) %>%   adorn_ns() %>%   adorn_title() #>              cyl                                     #>  gear          4          6           8        Total #>     3  6.67% (1) 13.33% (2) 80.00% (12) 100.00% (15) #>     4 66.67% (8) 33.33% (4)  0.00%  (0) 100.00% (12) #>     5 40.00% (2) 20.00% (1) 40.00%  (2) 100.00%  (5)"},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"explore-records-with-duplicated-values-for-specific-combinations-of-variables-with-get_dupes","dir":"Articles","previous_headings":"Major functions > Exploring","what":"Explore records with duplicated values for specific combinations of variables with get_dupes()","title":"Overview of janitor functions","text":"hunting examining duplicate records data cleaning - usually shouldn’t . example, tidy data.frame might expect unique ID repeated year, duplicated pairs unique ID & year. Say want check study duplicated records. get_dupes() returns records (inserts count duplicates) can examine problematic cases:","code":"get_dupes(mtcars, wt, cyl) # or mtcars %>% get_dupes(wt, cyl) if you prefer to pipe #>     wt cyl dupe_count  mpg  disp  hp drat  qsec vs am gear carb #> 1 3.44   6          2 19.2 167.6 123 3.92 18.30  1  0    4    4 #> 2 3.44   6          2 17.8 167.6 123 3.92 18.90  1  0    4    4 #> 3 3.57   8          2 14.3 360.0 245 3.21 15.84  0  0    3    4 #> 4 3.57   8          2 15.0 301.0 335 3.54 14.60  0  1    5    8"},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"explore-relationships-between-columns-with-get_one_to_one","dir":"Articles","previous_headings":"Major functions > Exploring","what":"Explore relationships between columns with get_one_to_one()","title":"Overview of janitor functions","text":"function shows , , columns data.frame one--one relationships . toy example looking first four rows starwars data.frame dplyr package. variables grouped three sets one--one clusters:","code":"library(dplyr) starwars[1:4, ] %>%   get_one_to_one() #> [[1]] #> [1] \"name\"       \"height\"     \"mass\"       \"skin_color\" \"birth_year\" #> [6] \"films\"      #>  #> [[2]] #> [1] \"hair_color\" \"starships\"  #>  #> [[3]] #> [1] \"sex\"     \"species\""},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"minor-functions","dir":"Articles","previous_headings":"","what":"Minor functions","title":"Overview of janitor functions","text":"Smaller functions use particular situations. human-readable equivalent code replace.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"manipulate-vectors-of-names-with-make_clean_names","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"Manipulate vectors of names with make_clean_names()","title":"Overview of janitor functions","text":"Like base R’s make.names(), stylings case choice long-time janitor function clean_names(). clean_names() still offered use data.frame pipeline %>%, make_clean_names() allows general usage, e.g., vector. can also used argument .name_repair newest version tibble::as_tibble:","code":"tibble::as_tibble(iris, .name_repair = janitor::make_clean_names) #> # A tibble: 150 × 5 #>    sepal_length sepal_width petal_length petal_width species #>           <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows"},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"validate-that-a-column-has-a-single_value-per-group","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"Validate that a column has a single_value() per group","title":"Overview of janitor functions","text":"function returns single value column, often used combination dplyr::group_by() validate every value X one associated value Y. complete value Y missing values column. ’s single value Y, info argument can help pinpoint occurs. Take data.frame. One pesky value X multiple values Y :","code":"not_one_to_one <- data.frame(   X = rep(1:3, each = 2),   Y = c(rep(1:2, each = 2), 1:2) )  not_one_to_one #>   X Y #> 1 1 1 #> 2 1 1 #> 3 2 2 #> 4 2 2 #> 5 3 1 #> 6 3 2  # throws informative error: try(not_one_to_one %>%   dplyr::group_by(X) %>%   dplyr::mutate(     Z = single_value(Y, info = paste(\"Calculating Z for group X =\", X))   )) #> Error in dplyr::mutate(., Z = single_value(Y, info = paste(\"Calculating Z for group X =\",  :  #>   ℹ In argument: `Z = single_value(Y, info = paste(\"Calculating Z for #>   group X =\", X))`. #> ℹ In group 3: `X = 3`. #> Caused by error in `single_value()`: #> ! More than one (2) value found (1, 2): Calculating Z for group X = 3: Calculating Z for group X = 3"},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"remove_empty-rows-and-columns","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"remove_empty() rows and columns","title":"Overview of janitor functions","text":"says. cases like cleaning Excel files contain empty rows columns read R. Just simple wrapper one-line functions, saves little thinking code writer reader.","code":"q <- data.frame(   v1 = c(1, NA, 3),   v2 = c(NA, NA, NA),   v3 = c(\"a\", NA, \"b\") ) q %>%   remove_empty(c(\"rows\", \"cols\")) #>   v1 v3 #> 1  1  a #> 3  3  b"},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"remove_constant-columns","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"remove_constant() columns","title":"Overview of janitor functions","text":"Drops columns data.frame contain single constant value (na.rm option control whether NAs considered different values constant). remove_constant remove_empty work matrices well data.frames.","code":"a <- data.frame(good = 1:3, boring = \"the same\") a %>% remove_constant() #>   good #> 1    1 #> 2    2 #> 3    3"},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"directionally-consistent-rounding-behavior-with-round_half_up","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"Directionally-consistent rounding behavior with round_half_up()","title":"Overview of janitor functions","text":"R uses “banker’s rounding”, .e., halves rounded nearest even number. function, exact implementation https://stackoverflow.com/questions/12688717/round---5/12688836#12688836, round halves . Compare:","code":"nums <- c(2.5, 3.5) round(nums) #> [1] 2 4 round_half_up(nums) #> [1] 3 4"},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"round-decimals-to-precise-fractions-of-a-given-denominator-with-round_to_fraction","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"Round decimals to precise fractions of a given denominator with round_to_fraction()","title":"Overview of janitor functions","text":"Say data values quarters: 0, 0.25, 0.5, 0.75, 1, etc. either user-entered bad values like 0.2 floating-point precision problems like 0.25000000001. round_to_fraction() enforce desired fractional distribution rounding values nearest value given specified denominator. ’s also digits argument optional subsequent rounding.","code":""},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"fix-dates-stored-as-serial-numbers-with-excel_numeric_to_date","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"Fix dates stored as serial numbers with excel_numeric_to_date()","title":"Overview of janitor functions","text":"Ever load data Excel see value like 42223 date ? function converts serial numbers class Date, options different Excel date encoding systems, preserving fractions date time (case returned value class POSIXlt), specifying time zone.","code":"excel_numeric_to_date(41103) #> [1] \"2012-07-13\" excel_numeric_to_date(41103.01) # ignores decimal places, returns Date object #> [1] \"2012-07-13\" excel_numeric_to_date(41103.01, include_time = TRUE) # returns POSIXlt object #> [1] \"2012-07-13 00:14:24 UTC\" excel_numeric_to_date(41103.01, date_system = \"mac pre-2011\") #> [1] \"2016-07-14\""},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"convert-a-mix-of-date-and-datetime-formats-to-date","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"Convert a mix of date and datetime formats to date","title":"Overview of janitor functions","text":"Building excel_numeric_to_date(), new functions convert_to_date() convert_to_datetime() robust mix inputs. Handy reading many spreadsheets column formats, don’t. instance, vector date Excel datetime sees values successfully converted Date class:","code":"convert_to_date(c(\"2020-02-29\", \"40000.1\")) #> [1] \"2020-02-29\" \"2009-07-06\""},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"elevate-column-names-stored-in-a-data-frame-row","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"Elevate column names stored in a data.frame row","title":"Overview of janitor functions","text":"data.frame intended variable names stored one rows, row_to_names() elevate specified row become names data.frame optionally (default) remove row names stored /rows .","code":"dirt <- data.frame(   X_1 = c(NA, \"ID\", 1:3),   X_2 = c(NA, \"Value\", 4:6) )  row_to_names(dirt, 2) #>   ID Value #> 3  1     4 #> 4  2     5 #> 5  3     6"},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"find-the-header-row-buried-within-a-messy-data-frame","dir":"Articles","previous_headings":"Minor functions > Cleaning","what":"Find the header row buried within a messy data.frame","title":"Overview of janitor functions","text":"function find_header() companion function row_to_names(). default search data.frame first row missing values return row number. can also used return row number given string present first column, specific column. result can supplied row_to_names().","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/articles/janitor.html","id":"count-factor-levels-in-groups-of-high-medium-and-low-with-top_levels","dir":"Articles","previous_headings":"Minor functions > Exploring","what":"Count factor levels in groups of high, medium, and low with top_levels()","title":"Overview of janitor functions","text":"Originally designed use Likert survey data stored factors. Returns tbl_df frequency table appropriately-named rows, grouped head/middle/tail groups. Takes user-specified size head/tail groups Automatically calculates percent column Supports sorting Can show hide NA values.","code":"f <- factor(c(\"strongly agree\", \"agree\", \"neutral\", \"neutral\", \"disagree\", \"strongly agree\"),   levels = c(\"strongly agree\", \"agree\", \"neutral\", \"disagree\", \"strongly disagree\") ) top_levels(f) #>                            f n   percent #>        strongly agree, agree 3 0.5000000 #>                      neutral 2 0.3333333 #>  disagree, strongly disagree 1 0.1666667 top_levels(f, n = 1) #>                         f n   percent #>            strongly agree 2 0.3333333 #>  agree, neutral, disagree 4 0.6666667 #>         strongly disagree 0 0.0000000"},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"motivation-why-tabyl","dir":"Articles","previous_headings":"","what":"Motivation: why tabyl?","title":"tabyls: a tidy, fully-featured approach to counting things","text":"Analysts lot counting. Indeed, ’s said “data science mostly counting things.” base R function counting, table(), leaves much desired: doesn’t accept data.frame inputs (thus doesn’t play nicely %>% pipe) doesn’t output data.frames results hard format. Compare look formatting choices R table Microsoft Excel PivotTable even table formatting provided SPSS. tabyl() approach tabulating variables addresses shortcomings. ’s part janitor package counting fundamental part data cleaning exploration. tabyl() tidyverse-aligned primarily built upon dplyr tidyr packages.","code":""},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How it works","title":"tabyls: a tidy, fully-featured approach to counting things","text":"surface, tabyl() produces frequency tables using 1, 2, 3 variables. hood, tabyl() also attaches copy counts attribute resulting data.frame. result looks like basic data.frame counts, ’s also tabyl containing metadata, can use adorn_ functions add additional information pretty formatting. adorn_ functions built work tabyls, adapted work similar, non-tabyl data.frames need formatting.","code":""},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"tabyls: a tidy, fully-featured approach to counting things","text":"vignette demonstrates tabyl context studying humans starwars dataset dplyr:","code":"library(dplyr) humans <- starwars %>%   filter(species == \"Human\")"},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"one-way-tabyl","dir":"Articles","previous_headings":"Examples","what":"One-way tabyl","title":"tabyls: a tidy, fully-featured approach to counting things","text":"Tabulating single variable simplest kind tabyl: NA values present, tabyl() also displays “valid” percentages, .e., missing values removed denominator. tabyl() built take data.frame column names, can also produce one-way tabyl calling directly vector: adorn_ helper functions built 2-way tabyls, make sense 1-way tabyl work:","code":"library(janitor)  t1 <- humans %>%   tabyl(eye_color)  t1 #>  eye_color  n    percent #>       blue 12 0.34285714 #>  blue-gray  1 0.02857143 #>      brown 17 0.48571429 #>       dark  1 0.02857143 #>      hazel  2 0.05714286 #>     yellow  2 0.05714286 x <- c(\"big\", \"big\", \"small\", \"small\", \"small\", NA) tabyl(x) #>      x n   percent valid_percent #>    big 2 0.3333333           0.4 #>  small 3 0.5000000           0.6 #>   <NA> 1 0.1666667            NA t1 %>%   adorn_totals(\"row\") %>%   adorn_pct_formatting() #>  eye_color  n percent #>       blue 12   34.3% #>  blue-gray  1    2.9% #>      brown 17   48.6% #>       dark  1    2.9% #>      hazel  2    5.7% #>     yellow  2    5.7% #>      Total 35  100.0%"},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"two-way-tabyl","dir":"Articles","previous_headings":"Examples","what":"Two-way tabyl","title":"tabyls: a tidy, fully-featured approach to counting things","text":"often called “crosstab” “contingency” table. Calling tabyl two columns data.frame produces result common combination dplyr::count(), followed tidyr::pivot_wider() wide form: Since ’s tabyl, can enhance adorn_ helper functions. instance: Adornments options control axes, rounding, relevant formatting choices ().","code":"t2 <- humans %>%   tabyl(gender, eye_color)  t2 #>     gender blue blue-gray brown dark hazel yellow #>   feminine    3         0     5    0     1      0 #>  masculine    9         1    12    1     1      2 t2 %>%   adorn_percentages(\"row\") %>%   adorn_pct_formatting(digits = 2) %>%   adorn_ns() #>     gender       blue blue-gray       brown      dark      hazel    yellow #>   feminine 33.33% (3) 0.00% (0) 55.56%  (5) 0.00% (0) 11.11% (1) 0.00% (0) #>  masculine 34.62% (9) 3.85% (1) 46.15% (12) 3.85% (1)  3.85% (1) 7.69% (2)"},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"three-way-tabyl","dir":"Articles","previous_headings":"Examples","what":"Three-way tabyl","title":"tabyls: a tidy, fully-featured approach to counting things","text":"Just table() accepts three variables, tabyl(), producing list tabyls: adorn_ helper functions called list data.frames - like output three-way tabyl call - call purrr::map() apply data.frame list: automatic mapping supports interactive data analysis switches combinations 2 3 variables. way, user starts humans %>% tabyl(eye_color, skin_color), adds adorn_ calls, decides split tabulation gender modifies first line humans %>% tabyl(eye_color, skin_color, gender), don’t rewrite subsequent adornment calls use map(). However, feels natural call map() lapply(), still supported. instance, t3 %>% lapply(adorn_percentages) produce result t3 %>% adorn_percentages.","code":"t3 <- humans %>%   tabyl(eye_color, skin_color, gender)  # the result is a tabyl of eye color x skin color, split into a list by gender t3 #> $feminine #>  eye_color dark fair light pale tan white #>       blue    0    2     1    0   0     0 #>  blue-gray    0    0     0    0   0     0 #>      brown    0    1     4    0   0     0 #>       dark    0    0     0    0   0     0 #>      hazel    0    0     1    0   0     0 #>     yellow    0    0     0    0   0     0 #>  #> $masculine #>  eye_color dark fair light pale tan white #>       blue    0    7     2    0   0     0 #>  blue-gray    0    1     0    0   0     0 #>      brown    3    4     3    0   2     0 #>       dark    1    0     0    0   0     0 #>      hazel    0    1     0    0   0     0 #>     yellow    0    0     0    1   0     1 library(purrr) humans %>%   tabyl(eye_color, skin_color, gender, show_missing_levels = FALSE) %>%   adorn_totals(\"row\") %>%   adorn_percentages(\"all\") %>%   adorn_pct_formatting(digits = 1) %>%   adorn_ns() %>%   adorn_title() #> $feminine #>            skin_color           #>  eye_color       fair     light #>       blue  22.2% (2) 11.1% (1) #>      brown  11.1% (1) 44.4% (4) #>      hazel   0.0% (0) 11.1% (1) #>      Total  33.3% (3) 66.7% (6) #>  #> $masculine #>            skin_color                                                 #>  eye_color       dark       fair     light     pale      tan    white #>       blue   0.0% (0) 26.9%  (7)  7.7% (2) 0.0% (0) 0.0% (0) 0.0% (0) #>  blue-gray   0.0% (0)  3.8%  (1)  0.0% (0) 0.0% (0) 0.0% (0) 0.0% (0) #>      brown  11.5% (3) 15.4%  (4) 11.5% (3) 0.0% (0) 7.7% (2) 0.0% (0) #>       dark   3.8% (1)  0.0%  (0)  0.0% (0) 0.0% (0) 0.0% (0) 0.0% (0) #>      hazel   0.0% (0)  3.8%  (1)  0.0% (0) 0.0% (0) 0.0% (0) 0.0% (0) #>     yellow   0.0% (0)  0.0%  (0)  0.0% (0) 3.8% (1) 0.0% (0) 3.8% (1) #>      Total  15.4% (4) 50.0% (13) 19.2% (5) 3.8% (1) 7.7% (2) 3.8% (1)"},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"other-features-of-tabyls","dir":"Articles","previous_headings":"Examples > Three-way tabyl","what":"Other features of tabyls","title":"tabyls: a tidy, fully-featured approach to counting things","text":"can suppressed desired NA values can displayed suppressed tabyls print without displaying row numbers can call chisq.test() fisher.test() two-way tabyl perform statistical tests, just like base R table() object.","code":""},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"the-adorn_-functions","dir":"Articles","previous_headings":"Examples","what":"The adorn_* functions","title":"tabyls: a tidy, fully-featured approach to counting things","text":"modular functions build tabyl approximate functionality PivotTable Microsoft Excel. print elegant results interactive analysis sharing report, e.g., knitr::kable(). example:","code":"humans %>%   tabyl(gender, eye_color) %>%   adorn_totals(c(\"row\", \"col\")) %>%   adorn_percentages(\"row\") %>%   adorn_pct_formatting(rounding = \"half up\", digits = 0) %>%   adorn_ns() %>%   adorn_title(\"combined\") %>%   knitr::kable()"},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"the-adorn-functions-are","dir":"Articles","previous_headings":"Examples > The adorn_* functions","what":"The adorn functions are:","title":"tabyls: a tidy, fully-featured approach to counting things","text":"adorn_totals(): Add totals row, column, . adorn_percentages(): Calculate percentages along either axis entire tabyl adorn_pct_formatting(): Format percentage columns, controlling number digits display whether append % symbol contrasts rounding 10.5 10 base R’s round(10.5). adorn_rounding() returns columns class numeric, allowing graphing, sorting, etc. ’s less-aggressive substitute adorn_pct_formatting(); two functions called together. adorn_ns(): add Ns tabyl. can drawn tabyl’s underlying counts, attached tabyl metadata, can supplied user. adorn_title(): add title tabyl (data.frame). Options include putting column title new row top data.frame combining row column titles data.frame’s first name slot. adornments called logical order, e.g., probably want add totals percentages calculated. general, call order appear .","code":""},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"byot-bring-your-own-tabyl","dir":"Articles","previous_headings":"Examples","what":"BYOt (Bring Your Own tabyl)","title":"tabyls: a tidy, fully-featured approach to counting things","text":"can also call adorn_ functions data.frames, results calls tabyl(). E.g., mtcars %>% adorn_totals(\"col\") %>% adorn_percentages(\"col\") performs expected, despite mtcars tabyl. can handy data.frame simple tabulation generated tabyl still benefit adorn_ formatting functions. simple example: calculate proportion records meeting certain condition, format results. can control columns adorned using ... argument. accepts tidyselect helpers. , can specify columns way using dplyr::select(). instance, say numeric column included percentage formatting wish exempt . , proportion column adorned: specify two consecutive numeric columns totaled (year numeric included): ’s complex example uses data.frame means, counts. create table containing mean 3rd variable grouped two variables, use adorn_ functions round values append Ns. first part pretty straightforward: Now adorn_ . Since result tabyl() call, doesn’t underlying Ns stored core attribute, ’ll supply : needed, Ns can manipulated data.frame appended. tabyl values thousands Ns formatted include separating character , typically seen American numbers, e.g., 3,000. First create tabyl adorn: point, Ns unformatted: Now format insert thousands commas. tabyl’s raw Ns stored \"core\" attribute. retrieve attr(), apply base R function format() numeric columns. Lastly, append Ns using adorn_ns().","code":"percent_above_165_cm <- humans %>%   group_by(gender) %>%   summarise(pct_above_165_cm = mean(height > 165, na.rm = TRUE), .groups = \"drop\")  percent_above_165_cm %>%   adorn_pct_formatting() #> # A tibble: 2 × 2 #>   gender    pct_above_165_cm #>   <chr>     <chr>            #> 1 feminine  12.5%            #> 2 masculine 100.0% mtcars %>%   count(cyl, gear) %>%   rename(proportion = n) %>%   adorn_percentages(\"col\", na.rm = TRUE, proportion) %>%   adorn_pct_formatting(, , , proportion) # the commas say to use the default values of the other arguments #>  cyl gear proportion #>    4    3       3.1% #>    4    4      25.0% #>    4    5       6.2% #>    6    3       6.2% #>    6    4      12.5% #>    6    5       3.1% #>    8    3      37.5% #>    8    5       6.2% cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%   adorn_totals(c(\"col\", \"row\"), fill = \"-\", na.rm = TRUE, name = \"Total Cases\", recovered:died) #>       region year recovered died Total Cases #>         East 2015       125   13         138 #>         West 2015        87   12          99 #>  Total Cases    -       212   25         237 library(tidyr) # for spread() mpg_by_cyl_and_am <- mtcars %>%   group_by(cyl, am) %>%   summarise(mpg = mean(mpg), .groups = \"drop\") %>%   spread(am, mpg)  mpg_by_cyl_and_am #> # A tibble: 3 × 3 #>     cyl   `0`   `1` #>   <dbl> <dbl> <dbl> #> 1     4  22.9  28.1 #> 2     6  19.1  20.6 #> 3     8  15.0  15.4 mpg_by_cyl_and_am %>%   adorn_rounding() %>%   adorn_ns(     ns = mtcars %>% # calculate the Ns on the fly by calling tabyl on the original data       tabyl(cyl, am)   ) %>%   adorn_title(\"combined\", row_name = \"Cylinders\", col_name = \"Is Automatic\") #>   Cylinders/Is Automatic         0        1 #> 1                      4 22.9  (3) 28.1 (8) #> 2                      6 19.1  (4) 20.6 (3) #> 3                      8 15.1 (12) 15.4 (2) set.seed(1) raw_data <- data.frame(   sex = rep(c(\"m\", \"f\"), 3000),   age = round(runif(3000, 1, 102), 0) ) raw_data$agegroup <- cut(raw_data$age, quantile(raw_data$age, c(0, 1 / 3, 2 / 3, 1)))  comparison <- raw_data %>%   tabyl(agegroup, sex, show_missing_levels = FALSE) %>%   adorn_totals(c(\"row\", \"col\")) %>%   adorn_percentages(\"col\") %>%   adorn_pct_formatting(digits = 1)  comparison #>  agegroup      f      m  Total #>    (1,34]  33.9%  32.3%  33.1% #>   (34,68]  33.0%  33.7%  33.4% #>  (68,102]  32.7%  33.3%  33.0% #>      <NA>   0.4%   0.6%   0.5% #>     Total 100.0% 100.0% 100.0% comparison %>%   adorn_ns() #>  agegroup              f              m          Total #>    (1,34]  33.9% (1,018)  32.3%   (970)  33.1% (1,988) #>   (34,68]  33.0%   (990)  33.7% (1,012)  33.4% (2,002) #>  (68,102]  32.7%   (980)  33.3% (1,000)  33.0% (1,980) #>      <NA>   0.4%    (12)   0.6%    (18)   0.5%    (30) #>     Total 100.0% (3,000) 100.0% (3,000) 100.0% (6,000) formatted_ns <- attr(comparison, \"core\") %>% # extract the tabyl's underlying Ns   adorn_totals(c(\"row\", \"col\")) %>% # to match the data.frame we're appending to   dplyr::mutate(across(where(is.numeric), ~ format(.x, big.mark = \",\")))  comparison %>%   adorn_ns(position = \"rear\", ns = formatted_ns) #>  agegroup              f              m          Total #>    (1,34]  33.9% (1,018)  32.3% (  970)  33.1% (1,988) #>   (34,68]  33.0% (  990)  33.7% (1,012)  33.4% (2,002) #>  (68,102]  32.7% (  980)  33.3% (1,000)  33.0% (1,980) #>      <NA>   0.4% (   12)   0.6% (   18)   0.5% (   30) #>     Total 100.0% (3,000) 100.0% (3,000) 100.0% (6,000)"},{"path":"https://sfirke.github.io/janitor/articles/tabyls.html","id":"questions-comments","dir":"Articles","previous_headings":"Examples > BYOt (Bring Your Own tabyl)","what":"Questions? Comments?","title":"tabyls: a tidy, fully-featured approach to counting things","text":"File issue GitHub suggestions related tabyl() adorn_ helpers encounter problems using .","code":""},{"path":"https://sfirke.github.io/janitor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Firke. Author, maintainer. Bill Denney. Contributor. Chris Haid. Contributor. Ryan Knight. Contributor. Malte Grosser. Contributor. Jonathan Zadra. Contributor.","code":""},{"path":"https://sfirke.github.io/janitor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Firke S (2023). janitor: Simple Tools Examining Cleaning Dirty Data. https://github.com/sfirke/janitor, https://sfirke.github.io/janitor/.","code":"@Manual{,   title = {janitor: Simple Tools for Examining and Cleaning Dirty Data},   author = {Sam Firke},   year = {2023},   note = {https://github.com/sfirke/janitor, https://sfirke.github.io/janitor/}, }"},{"path":"https://sfirke.github.io/janitor/index.html","id":"janitor-","dir":"","previous_headings":"","what":"Simple Tools for Examining and Cleaning Dirty Data","title":"Simple Tools for Examining and Cleaning Dirty Data","text":"Data scientists, according interviews expert estimates, spend 50 percent 80 percent time mired mundane labor collecting preparing unruly digital data, can explored useful nuggets. – “Big-Data Scientists, ‘Janitor Work’ Key Hurdle Insight” (New York Times, 2014)  janitor simple functions examining cleaning dirty data. built beginning intermediate R users mind optimized user-friendliness. Advanced R users can already everything covered , janitor can faster save thinking fun stuff. main janitor functions: perfectly format data.frame column names; create format frequency tables one, two, three variables - think improved table(); provide tools cleaning examining data.frames. tabulate--report functions approximate popular features SPSS Microsoft Excel. janitor #tidyverse-oriented package. Specifically, plays nicely %>% pipe optimized cleaning data brought readr readxl packages.","code":""},{"path":"https://sfirke.github.io/janitor/index.html","id":"id_-getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Simple Tools for Examining and Cleaning Dirty Data","text":"can install: recent officially-released version CRAN latest development version GitHub ","code":"install.packages(\"janitor\") install.packages(\"devtools\") devtools::install_github(\"sfirke/janitor\")"},{"path":"https://sfirke.github.io/janitor/index.html","id":"using-janitor","dir":"","previous_headings":"","what":"Using janitor","title":"Simple Tools for Examining and Cleaning Dirty Data","text":"full description function, organized topic, can found janitor’s catalog functions vignette. find functions mentioned README, like compare_df_cols() provides summary differences column names types given set data.frames. quick examples janitor tools commonly used.","code":""},{"path":"https://sfirke.github.io/janitor/index.html","id":"cleaning-dirty-data","dir":"","previous_headings":"Using janitor","what":"Cleaning dirty data","title":"Simple Tools for Examining and Cleaning Dirty Data","text":"Take roster teachers fictional American high school, stored Microsoft Excel file dirty_data.xlsx: Dirtiness includes: header top Dreadful column names Rows columns containing Excel formatting data Dates two different formats single column (MM/DD/YYYY numbers) Values spread inconsistently “Certification” columns ’s data read R: Now, clean , starting column names. Name cleaning comes two flavors. make_clean_names() operates character vectors can used data import: clean_names() convenience version make_clean_names() can used piped data.frame workflows. equivalent steps clean_names() : data.frame now clean names. Let’s tidy :","code":"library(readxl); library(janitor); library(dplyr); library(here)  roster_raw <- read_excel(here(\"dirty_data.xlsx\")) # available at https://github.com/sfirke/janitor glimpse(roster_raw) #> Rows: 14 #> Columns: 11 #> $ `Data most recently refreshed on:` <chr> \"First Name\", \"Jason\", \"Jason\", \"Alicia\", \"Ada\", \"Desus\", \"Chien-… #> $ ...2                               <chr> \"Last Name\", \"Bourne\", \"Bourne\", \"Keys\", \"Lovelace\", \"Nice\", \"Wu\"… #> $ ...3                               <chr> \"Employee Status\", \"Teacher\", \"Teacher\", \"Teacher\", \"Teacher\", \"A… #> $ `Dec-27 2020`                      <chr> \"Subject\", \"PE\", \"Drafting\", \"Music\", NA, \"Dean\", \"Physics\", \"Che… #> $ ...5                               <chr> \"Hire Date\", \"39690\", \"43479\", \"37118\", \"38572\", \"42791\", \"11037\"… #> $ ...6                               <chr> \"% Allocated\", \"0.75\", \"0.25\", \"1\", \"1\", \"1\", \"0.5\", \"0.5\", NA, \"… #> $ ...7                               <chr> \"Full time?\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", NA… #> $ ...8                               <chr> \"do not edit! --->\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ ...9                               <chr> \"Certification\", \"Physical ed\", \"Physical ed\", \"Instr. music\", \"P… #> $ ...10                              <chr> \"Certification\", \"Theater\", \"Theater\", \"Vocal music\", \"Computers\"… #> $ ...11                              <chr> \"Active?\", \"YES\", \"YES\", \"YES\", \"YES\", \"YES\", \"YES\", \"YES\", NA, \"… roster_raw_cleaner <- read_excel(here(\"dirty_data.xlsx\"),                                   skip = 1,                                  .name_repair = make_clean_names) glimpse(roster_raw_cleaner) #> Rows: 13 #> Columns: 11 #> $ first_name        <chr> \"Jason\", \"Jason\", \"Alicia\", \"Ada\", \"Desus\", \"Chien-Shiung\", \"Chien-Shiung\", NA, \"J… #> $ last_name         <chr> \"Bourne\", \"Bourne\", \"Keys\", \"Lovelace\", \"Nice\", \"Wu\", \"Wu\", NA, \"Joyce\", \"Lamarr\",… #> $ employee_status   <chr> \"Teacher\", \"Teacher\", \"Teacher\", \"Teacher\", \"Administration\", \"Teacher\", \"Teacher\"… #> $ subject           <chr> \"PE\", \"Drafting\", \"Music\", NA, \"Dean\", \"Physics\", \"Chemistry\", NA, \"English\", \"Sci… #> $ hire_date         <dbl> 39690, 43479, 37118, 38572, 42791, 11037, 11037, NA, 36423, 27919, 42221, 34700, 4… #> $ percent_allocated <dbl> 0.75, 0.25, 1.00, 1.00, 1.00, 0.50, 0.50, NA, 0.50, 0.50, NA, NA, 0.80 #> $ full_time         <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", NA, \"No\", \"No\", \"No\", \"No\", \"No\" #> $ do_not_edit       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ certification     <chr> \"Physical ed\", \"Physical ed\", \"Instr. music\", \"PENDING\", \"PENDING\", \"Science 6-12\"… #> $ certification_2   <chr> \"Theater\", \"Theater\", \"Vocal music\", \"Computers\", NA, \"Physics\", \"Physics\", NA, \"E… #> $ active            <chr> \"YES\", \"YES\", \"YES\", \"YES\", \"YES\", \"YES\", \"YES\", NA, \"YES\", \"YES\", \"YES\", \"YES\", \"… roster_raw <- roster_raw %>%   row_to_names(row_number = 1) %>%   clean_names() roster <- roster_raw %>%   remove_empty(c(\"rows\", \"cols\")) %>%   remove_constant(na.rm = TRUE, quiet = FALSE) %>% # remove the column of all \"Yes\" values    mutate(hire_date = convert_to_date(hire_date, # handle the mixed-format dates                                      character_fun = lubridate::mdy),          cert = dplyr::coalesce(certification, certification_2)) %>%   select(-certification, -certification_2) # drop unwanted columns #> Removing 1 constant columns of 10 columns total (Removed: active).  roster #> # A tibble: 12 × 8 #>    first_name   last_name employee_status subject    hire_date  percent_allocated full_time cert           #>    <chr>        <chr>     <chr>           <chr>      <date>     <chr>             <chr>     <chr>          #>  1 Jason        Bourne    Teacher         PE         2008-08-30 0.75              Yes       Physical ed    #>  2 Jason        Bourne    Teacher         Drafting   2019-01-14 0.25              Yes       Physical ed    #>  3 Alicia       Keys      Teacher         Music      2001-08-15 1                 Yes       Instr. music   #>  4 Ada          Lovelace  Teacher         <NA>       2005-08-08 1                 Yes       PENDING        #>  5 Desus        Nice      Administration  Dean       2017-02-25 1                 Yes       PENDING        #>  6 Chien-Shiung Wu        Teacher         Physics    1930-03-20 0.5               Yes       Science 6-12   #>  7 Chien-Shiung Wu        Teacher         Chemistry  1930-03-20 0.5               Yes       Science 6-12   #>  8 James        Joyce     Teacher         English    1999-09-20 0.5               No        English 6-12   #>  9 Hedy         Lamarr    Teacher         Science    1976-06-08 0.5               No        PENDING        #> 10 Carlos       Boozer    Coach           Basketball 2015-08-05 <NA>              No        Physical ed    #> 11 Young        Boozer    Coach           <NA>       1995-01-01 <NA>              No        Political sci. #> 12 Micheal      Larsen    Teacher         English    2009-09-15 0.8               No        Vocal music"},{"path":[]},{"path":"https://sfirke.github.io/janitor/index.html","id":"finding-duplicates","dir":"","previous_headings":"Using janitor > Examining dirty data","what":"Finding duplicates","title":"Simple Tools for Examining and Cleaning Dirty Data","text":"Use get_dupes() identify examine duplicate records data cleaning. Let’s see teachers listed : Yes, teachers appear twice. address counting employees.","code":"roster %>% get_dupes(contains(\"name\")) #> # A tibble: 4 × 9 #>   first_name   last_name dupe_count employee_status subject   hire_date  percent_allocated full_time cert      #>   <chr>        <chr>          <int> <chr>           <chr>     <date>     <chr>             <chr>     <chr>     #> 1 Chien-Shiung Wu                 2 Teacher         Physics   1930-03-20 0.5               Yes       Science … #> 2 Chien-Shiung Wu                 2 Teacher         Chemistry 1930-03-20 0.5               Yes       Science … #> 3 Jason        Bourne             2 Teacher         PE        2008-08-30 0.75              Yes       Physical… #> 4 Jason        Bourne             2 Teacher         Drafting  2019-01-14 0.25              Yes       Physical…"},{"path":"https://sfirke.github.io/janitor/index.html","id":"tabulating-tools","dir":"","previous_headings":"Using janitor > Examining dirty data","what":"Tabulating tools","title":"Simple Tools for Examining and Cleaning Dirty Data","text":"variable (combinations two three variables) can tabulated tabyl(). resulting data.frame can tweaked formatted suite adorn_ functions quick analysis printing pretty results report. adorn_ functions can helpful non-tabyls, .","code":""},{"path":"https://sfirke.github.io/janitor/index.html","id":"tabyl","dir":"","previous_headings":"Using janitor > Examining dirty data","what":"tabyl()","title":"Simple Tools for Examining and Cleaning Dirty Data","text":"Like table(), pipe-able, data.frame-based, fully featured. tabyl can called two ways: vector, tabulating single variable: tabyl(roster$subject) data.frame passed %>% pipe; allows tabyl used analysis pipeline One variable: Two variables: Three variables: Adorning tabyls adorn_ functions dress results tabulation calls fast, basic reporting. functions augment summary table reporting: Pipe right knitr::kable() RMarkdown report. modular adornments can layered reduce R’s deficit Excel SPSS comes quick, informative counts. Learn tabyl() adorn_ functions tabyls vignette.","code":"roster %>%   tabyl(subject) #>     subject n    percent valid_percent #>  Basketball 1 0.08333333           0.1 #>   Chemistry 1 0.08333333           0.1 #>        Dean 1 0.08333333           0.1 #>    Drafting 1 0.08333333           0.1 #>     English 2 0.16666667           0.2 #>       Music 1 0.08333333           0.1 #>          PE 1 0.08333333           0.1 #>     Physics 1 0.08333333           0.1 #>     Science 1 0.08333333           0.1 #>        <NA> 2 0.16666667            NA roster %>%   filter(hire_date > as.Date(\"1950-01-01\")) %>%   tabyl(employee_status, full_time) #>  employee_status No Yes #>   Administration  0   1 #>            Coach  2   0 #>          Teacher  3   4 roster %>%   tabyl(full_time, subject, employee_status, show_missing_levels = FALSE) #> $Administration #>  full_time Dean #>        Yes    1 #>  #> $Coach #>  full_time Basketball NA_ #>         No          1   1 #>  #> $Teacher #>  full_time Chemistry Drafting English Music PE Physics Science NA_ #>         No         0        0       2     0  0       0       1   0 #>        Yes         1        1       0     1  1       1       0   1 roster %>%   tabyl(employee_status, full_time) %>%   adorn_totals(\"row\") %>%   adorn_percentages(\"row\") %>%   adorn_pct_formatting() %>%   adorn_ns() %>%   adorn_title(\"combined\") #>  employee_status/full_time         No        Yes #>             Administration   0.0% (0) 100.0% (1) #>                      Coach 100.0% (2)   0.0% (0) #>                    Teacher  33.3% (3)  66.7% (6) #>                      Total  41.7% (5)  58.3% (7)"},{"path":"https://sfirke.github.io/janitor/index.html","id":"id_-contact-me","dir":"","previous_headings":"","what":"Contact Me","title":"Simple Tools for Examining and Cleaning Dirty Data","text":"welcome : submit suggestions report bugs: https://github.com/sfirke/janitor/issues let know think Mastodon: @samfirke@a2mi.social compose friendly e-mail :","code":""},{"path":"https://sfirke.github.io/janitor/issue_template.html","id":"feature-requests","dir":"","previous_headings":"","what":"Feature requests","title":"NA","text":"Briefly describe feature scope janitor package.","code":""},{"path":"https://sfirke.github.io/janitor/issue_template.html","id":"bug-reports","dir":"","previous_headings":"","what":"Bug reports","title":"NA","text":"Please briefly describe problem output expect. Please include minimal reprex. goal reprex make easy possible recreate problem can fix . ’ve never heard reprex , start reading https://github.com/jennybc/reprex#---reprex, follow advice page. Delete instructions read . Brief description problem","code":"# insert reprex here"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/add_totals_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a totals column to a data.frame. — add_totals_col","title":"Append a totals column to a data.frame. — add_totals_col","text":"function deprecated, use adorn_totals instead.","code":""},{"path":"https://sfirke.github.io/janitor/reference/add_totals_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a totals column to a data.frame. — add_totals_col","text":"","code":"add_totals_col(dat, na.rm = TRUE)"},{"path":"https://sfirke.github.io/janitor/reference/add_totals_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a totals column to a data.frame. — add_totals_col","text":"dat input data.frame least one numeric column. na.rm missing values (including NaN) omitted calculations?","code":""},{"path":"https://sfirke.github.io/janitor/reference/add_totals_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a totals column to a data.frame. — add_totals_col","text":"Returns data.frame totals column containing row-wise sums.","code":""},{"path":"https://sfirke.github.io/janitor/reference/add_totals_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a totals row to a data.frame. — add_totals_row","title":"Append a totals row to a data.frame. — add_totals_row","text":"function deprecated, use adorn_totals instead.","code":""},{"path":"https://sfirke.github.io/janitor/reference/add_totals_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a totals row to a data.frame. — add_totals_row","text":"","code":"add_totals_row(dat, fill = \"-\", na.rm = TRUE)"},{"path":"https://sfirke.github.io/janitor/reference/add_totals_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a totals row to a data.frame. — add_totals_row","text":"dat input data.frame least one numeric column. fill one non-numeric columns, string fill bottom row columns? na.rm missing values (including NaN) omitted calculations?","code":""},{"path":"https://sfirke.github.io/janitor/reference/add_totals_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a totals row to a data.frame. — add_totals_row","text":"Returns data.frame totals row, consisting \"Total\" first column column sums others.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_crosstab.html","id":null,"dir":"Reference","previous_headings":"","what":"Add presentation formatting to a crosstabulation table. — adorn_crosstab","title":"Add presentation formatting to a crosstabulation table. — adorn_crosstab","text":"function deprecated, use adorn_ family functions instead.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_crosstab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add presentation formatting to a crosstabulation table. — adorn_crosstab","text":"","code":"adorn_crosstab(   dat,   denom = \"row\",   show_n = TRUE,   digits = 1,   show_totals = FALSE,   rounding = \"half to even\" )"},{"path":"https://sfirke.github.io/janitor/reference/adorn_crosstab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add presentation formatting to a crosstabulation table. — adorn_crosstab","text":"dat data.frame row names first column numeric values columns.  Usually piped-result call  crosstab included argument percent = \"none\". denom denominator use calculating percentages.  One \"row\", \"col\", \"\". show_n counts displayed alongside percentages? digits many digits displayed decimal point? show_totals display totals summary? row, column, depending value denom. rounding method use truncating percentages - either \"half even\", base R default method, \"half \", 14.5 rounds 15.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_crosstab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add presentation formatting to a crosstabulation table. — adorn_crosstab","text":"Returns data.frame.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"function adds back underlying Ns tabyl whose percentages calculated using adorn_percentages(), display Ns percentages together.  can also call non-tabyl data.frame wish append Ns.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"","code":"adorn_ns(   dat,   position = \"rear\",   ns = attr(dat, \"core\"),   format_func = function(x) {      format(x, big.mark = \",\")  },   ... )"},{"path":"https://sfirke.github.io/janitor/reference/adorn_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"dat data.frame class tabyl adorn_percentages /adorn_pct_formatting called .  given list data.frames, function apply data.frame list (designed 3-way tabyl lists). position N go front, rear, percentage? ns Ns append.  default \"core\" attribute input tabyl dat, original Ns two-way tabyl stored.  However, Ns stored somewhere else, need customize beyond can done `format_func`, can supply . format_func formatting function run Ns.  Consider defining base::format(). ... columns adorn.  takes tidyselect specification.  default, columns adorned except first column columns class numeric, allows manually specify columns adorned, use data.frame result call tabyl.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"data.frame Ns appended","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add underlying Ns to a tabyl displaying percentages. — adorn_ns","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages(\"col\") %>%   adorn_pct_formatting() %>%   adorn_ns(position = \"front\") #>  am         4         6          8 #>   0 3 (27.3%) 4 (57.1%) 12 (85.7%) #>   1 8 (72.7%) 3 (42.9%)  2 (14.3%)  # Format the Ns with a custom format_func: set.seed(1) bigger_dat <- data.frame(   sex = rep(c(\"m\", \"f\"), 3000),   age = round(runif(3000, 1, 102), 0) ) bigger_dat$age_group <- cut(bigger_dat$age, quantile(bigger_dat$age, c(0, 1 / 3, 2 / 3, 1)))  bigger_dat %>%   tabyl(age_group, sex, show_missing_levels = FALSE) %>%   adorn_totals(c(\"row\", \"col\")) %>%   adorn_percentages(\"col\") %>%   adorn_pct_formatting(digits = 1) %>%   adorn_ns(format_func = function(x) format(x, big.mark = \".\", decimal.mark = \",\")) #>  age_group              f              m          Total #>     (1,34]  33.9% (1.018)  32.3%   (970)  33.1% (1.988) #>    (34,68]  33.0%   (990)  33.7% (1.012)  33.4% (2.002) #>   (68,102]  32.7%   (980)  33.3% (1.000)  33.0% (1.980) #>       <NA>   0.4%    (12)   0.6%    (18)   0.5%    (30) #>      Total 100.0% (3.000) 100.0% (3.000) 100.0% (6.000) # Control the columns to be adorned with the ... variable selection argument # If using only the ... argument, you can use empty commas as shorthand # to supply the default values to the preceding arguments:  cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%  adorn_percentages(\"col\",,recovered:died) %>%  adorn_pct_formatting(,,,,,recovered:died) %>%  adorn_ns(,,,recovered:died) #>  region year   recovered       died #>    East 2015 59.0% (125) 52.0% (13) #>    West 2015 41.0%  (87) 48.0% (12)"},{"path":"https://sfirke.github.io/janitor/reference/adorn_pct_formatting.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"Numeric columns get multiplied 100 formatted percentages according user specifications.  function defaults excluding first column input data.frame, assuming contains descriptive variable, can overridden specifying columns adorn ... argument.  Non-numeric columns always excluded. decimal separator character result getOption(\"OutDec\"), based user's locale.  default behavior undesirable, change value ahead calling function, either changing locale options(OutDec = \",\").  aligns decimal separator character used base::print().","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_pct_formatting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"","code":"adorn_pct_formatting(   dat,   digits = 1,   rounding = \"half to even\",   affix_sign = TRUE,   ... )"},{"path":"https://sfirke.github.io/janitor/reference/adorn_pct_formatting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"dat data.frame decimal values, typically result call adorn_percentages tabyl.  given list data.frames, function apply data.frame list (designed 3-way tabyl lists). digits many digits displayed decimal point? rounding method use rounding - either \"half even\", base R default method, \"half \", 14.5 rounds 15. affix_sign % sign affixed end? ... columns adorn.  takes tidyselect specification.  default, numeric columns (besides initial column, numeric) adorned, allows manually specify columns adorned, use data.frame result call tabyl.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_pct_formatting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"data.frame formatted percentages","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_pct_formatting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a data.frame of decimals as percentages. — adorn_pct_formatting","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages(\"col\") %>%   adorn_pct_formatting() #>  am     4     6     8 #>   0 27.3% 57.1% 85.7% #>   1 72.7% 42.9% 14.3%  # Control the columns to be adorned with the ... variable selection argument # If using only the ... argument, you can use empty commas as shorthand # to supply the default values to the preceding arguments:  cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%   adorn_percentages(\"col\", , recovered:died) %>%   adorn_pct_formatting(, , , recovered:died) #>  region year recovered  died #>    East 2015     59.0% 52.0% #>    West 2015     41.0% 48.0%"},{"path":"https://sfirke.github.io/janitor/reference/adorn_percentages.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.frame of counts to percentages. — adorn_percentages","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"function defaults excluding first column input data.frame, assuming contains descriptive variable, can overridden specifying columns adorn ... argument.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_percentages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"","code":"adorn_percentages(dat, denominator = \"row\", na.rm = TRUE, ...)"},{"path":"https://sfirke.github.io/janitor/reference/adorn_percentages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"dat tabyl data.frame tabyl-like layout.  given list data.frames, function apply data.frame list (designed 3-way tabyl lists). denominator direction use calculating percentages.  One \"row\", \"col\", \"\". na.rm missing values (including NaN) omitted calculations? ... columns adorn.  takes tidyselect specification.  default, numeric columns (besides initial column, numeric) adorned, allows manually specify columns adorned, use data.frame result call tabyl.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_percentages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"Returns data.frame percentages, expressed numeric values 0 1.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_percentages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame of counts to percentages. — adorn_percentages","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages(\"col\") #>  am         4         6         8 #>   0 0.2727273 0.5714286 0.8571429 #>   1 0.7272727 0.4285714 0.1428571  # calculates correctly even with totals column and/or row: mtcars %>%   tabyl(am, cyl) %>%   adorn_totals(\"row\") %>%   adorn_percentages() #>     am         4         6         8 #>      0 0.1578947 0.2105263 0.6315789 #>      1 0.6153846 0.2307692 0.1538462 #>  Total 0.3437500 0.2187500 0.4375000  # Control the columns to be adorned with the ... variable selection argument # If using only the ... argument, you can use empty commas as shorthand # to supply the default values to the preceding arguments:  cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%   adorn_percentages(, , recovered:died) #>  region year recovered      died #>    East 2015 0.9057971 0.0942029 #>    West 2015 0.8787879 0.1212121"},{"path":"https://sfirke.github.io/janitor/reference/adorn_rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Round the numeric columns in a data.frame. — adorn_rounding","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"Can run data.frame least one numeric column.  function defaults excluding first column input data.frame, assuming contains descriptive variable, can overridden specifying columns round ... argument. formatting percentages, e.g., result adorn_percentages(), use adorn_pct_formatting() instead.  flexible variant ad-hoc usage.  Compared adorn_pct_formatting(), multiply 100 pad numbers spaces alignment results data.frame.   function retains class numeric input columns.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"","code":"adorn_rounding(dat, digits = 1, rounding = \"half to even\", ...)"},{"path":"https://sfirke.github.io/janitor/reference/adorn_rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"dat tabyl data.frame similar layout.  given list data.frames, function apply data.frame list (designed 3-way tabyl lists). digits many digits displayed decimal point? rounding method use rounding - either \"half even\", base R default method, \"half \", 14.5 rounds 15. ... columns adorn.  takes tidyselect specification.  default, numeric columns (besides initial column, numeric) adorned, allows manually specify columns adorned, use data.frame result call tabyl.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_rounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"Returns data.frame rounded numeric columns.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round the numeric columns in a data.frame. — adorn_rounding","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages() %>%   adorn_rounding(digits = 2, rounding = \"half up\") #>  am    4    6    8 #>   0 0.16 0.21 0.63 #>   1 0.62 0.23 0.15  # tolerates non-numeric columns: library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union mtcars %>%   tabyl(am, cyl) %>%   adorn_percentages(\"all\") %>%   mutate(dummy = \"a\") %>%   adorn_rounding() #>  am   4   6   8 dummy #>   0 0.1 0.1 0.4     a #>   1 0.2 0.1 0.1     a  # Control the columns to be adorned with the ... variable selection argument # If using only the ... argument, you can use empty commas as shorthand # to supply the default values to the preceding arguments: cases <- data.frame(   region = c(\"East\", \"West\"),   year = 2015,   recovered = c(125, 87),   died = c(13, 12) )  cases %>%   adorn_percentages(, , ends_with(\"ed\")) %>%   adorn_rounding(, , one_of(c(\"recovered\", \"died\"))) #>  region year recovered died #>    East 2015       0.9  0.1 #>    West 2015       0.9  0.1"},{"path":"https://sfirke.github.io/janitor/reference/adorn_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Add column name to the top of a two-way tabyl. — adorn_title","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"function adds column variable name top tabyl complete display information.  makes tabyl prettier, renders data.frame less useful manipulation.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"","code":"adorn_title(dat, placement = \"top\", row_name, col_name)"},{"path":"https://sfirke.github.io/janitor/reference/adorn_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"dat data.frame class tabyl data.frame tabyl-like layout.  given list data.frames, function apply data.frame list (designed 3-way tabyl lists). placement whether column name added top tabyl otherwise-empty row \"top\" appended already-present row name variable (\"combined\").  formatting \"top\" option look base R's table(); also wipes column names, making hard use data.frame besides formatting reporting.  \"combined\" option conservative regard. row_name (optional) default behavior pull row name attributes input tabyl object.  wish override text, input tabyl, supply string . col_name (optional) default behavior pull column_name attributes input tabyl object.  wish override text, input tabyl, supply string .","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"input tabyl, augmented column title.  Non-tabyl inputs class tbl_df downgraded basic data.frames title row prints correctly.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add column name to the top of a two-way tabyl. — adorn_title","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_title(placement = \"top\") #>     cyl      #>  am   4 6  8 #>   0   3 4 12 #>   1   8 3  2  # Adding a title to a non-tabyl library(tidyr) library(dplyr) mtcars %>%   group_by(gear, am) %>%   summarise(avg_mpg = mean(mpg), .groups = \"drop\") %>%   spread(gear, avg_mpg) %>%   adorn_rounding() %>%   adorn_title(\"top\", row_name = \"Gears\", col_name = \"Cylinders\") #>         Cylinders           #> 1 Gears         3    4    5 #> 2     0      16.1   21 <NA> #> 3     1      <NA> 26.3 21.4"},{"path":"https://sfirke.github.io/janitor/reference/adorn_totals.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a totals row and/or column to a data.frame. — adorn_totals","title":"Append a totals row and/or column to a data.frame. — adorn_totals","text":"function defaults excluding first column input data.frame, assuming contains descriptive variable, can overridden specifying columns totaled ... argument.  Non-numeric columns converted character class user-specified fill character inserted totals row.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_totals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a totals row and/or column to a data.frame. — adorn_totals","text":"","code":"adorn_totals(dat, where = \"row\", fill = \"-\", na.rm = TRUE, name = \"Total\", ...)"},{"path":"https://sfirke.github.io/janitor/reference/adorn_totals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a totals row and/or column to a data.frame. — adorn_totals","text":"dat input data.frame least one numeric column.  given list data.frames, function apply data.frame list (designed 3-way tabyl lists). one \"row\", \"col\", c(\"row\", \"col\") fill non-numeric columns, fill bottom row columns? string, relevant columns coerced character. `NA` column types preserved. na.rm missing values (including NaN) omitted calculations? name name totals row /column.  created, name single string, name applied . created name vector length 2, first element vector used row name (column 1), second element used totals column name. Defaults \"Total\". ... columns total.  takes tidyselect specification.  default, numeric columns (besides initial column, numeric) included totals, allows manually specify columns included, use data.frame result call tabyl.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_totals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a totals row and/or column to a data.frame. — adorn_totals","text":"Returns data.frame augmented totals row, column, .  data.frame now also class tabyl stores information attached totals underlying data tabyl attributes.","code":""},{"path":"https://sfirke.github.io/janitor/reference/adorn_totals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a totals row and/or column to a data.frame. — adorn_totals","text":"","code":"mtcars %>%   tabyl(am, cyl) %>%   adorn_totals() #>     am  4 6  8 #>      0  3 4 12 #>      1  8 3  2 #>  Total 11 7 14"},{"path":"https://sfirke.github.io/janitor/reference/as_tabyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Add tabyl attributes to a data.frame. — as_tabyl","title":"Add tabyl attributes to a data.frame. — as_tabyl","text":"tabyl data.frame containing counts variable co-occurrences two variables (.k.., contingency table crosstab).  specialized kind data.frame attributes enable adorn_ functions called precise formatting presentation results.  E.g., display results mix percentages, Ns, add totals rows columns, rounding options, style Microsoft Excel PivotTable. tabyl can result call janitor::tabyl(), case attributes added automatically.  function adds tabyl class attributes data.frame result call tabyl meets requirements two-way tabyl: 1) First column contains values variable 1 2) Column names 2:n values variable 2 3) Numeric values columns 2:n counts co-occurrences two variables.* * = ideal form tabyl, janitor's adorn_ functions tolerate ignore non-numeric columns positions 2:n. instance, result dplyr::count() followed tidyr::spread() can treated tabyl. result calling tabyl() single variable special class one-way tabyl; function pertains two-way tabyl.","code":""},{"path":"https://sfirke.github.io/janitor/reference/as_tabyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add tabyl attributes to a data.frame. — as_tabyl","text":"","code":"as_tabyl(dat, axes = 2, row_var_name = NULL, col_var_name = NULL)"},{"path":"https://sfirke.github.io/janitor/reference/as_tabyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add tabyl attributes to a data.frame. — as_tabyl","text":"dat data.frame variable values first column numeric values columns. axes two_way tabyl one_way tabyl?  function called user, probably \"2\".  One-way tabyls created tabyl special case. row_var_name (optional) name variable row dimension; used adorn_title(). col_var_name (optional) name variable column dimension; used adorn_title().","code":""},{"path":"https://sfirke.github.io/janitor/reference/as_tabyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add tabyl attributes to a data.frame. — as_tabyl","text":"Returns data.frame, additional class \"tabyl\" attribute \"core\".","code":""},{"path":"https://sfirke.github.io/janitor/reference/as_tabyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add tabyl attributes to a data.frame. — as_tabyl","text":"","code":"as_tabyl(mtcars) #>   mpg cyl  disp  hp drat    wt  qsec vs am gear carb #>  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #>  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #>  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #>  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #>  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #>  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #>  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #>  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #>  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #>  19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #>  17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #>  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #>  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #>  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #>  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #>  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #>  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #>  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #>  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #>  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #>  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #>  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #>  15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #>  13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #>  19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #>  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #>  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #>  30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #>  15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #>  19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #>  15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #>  21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://sfirke.github.io/janitor/reference/chisq.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply stats::chisq.test to a two-way tabyl — chisq.test","title":"Apply stats::chisq.test to a two-way tabyl — chisq.test","text":"generic function overrides stats::chisq.test. passed table two-way tabyl, runs janitor::chisq.test.tabyl, otherwise just calls stats::chisq.test.","code":""},{"path":"https://sfirke.github.io/janitor/reference/chisq.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply stats::chisq.test to a two-way tabyl — chisq.test","text":"","code":"chisq.test(x, ...)  # S3 method for default chisq.test(x, y = NULL, ...)  # S3 method for tabyl chisq.test(x, tabyl_results = TRUE, ...)"},{"path":"https://sfirke.github.io/janitor/reference/chisq.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply stats::chisq.test to a two-way tabyl — chisq.test","text":"x two-way tabyl, numeric vector factor ... parameters passed stats::chisq.test y x vector, must another vector factor length tabyl_results TRUE x tabyl object, also return `observed`, `expected`, `residuals` `stdres` tabyl","code":""},{"path":"https://sfirke.github.io/janitor/reference/chisq.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply stats::chisq.test to a two-way tabyl — chisq.test","text":"result one stats::chisq.test. `tabyl_results` TRUE, returned tables `observed`, `expected`, `residuals` `stdres` converted tabyls.","code":""},{"path":"https://sfirke.github.io/janitor/reference/chisq.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply stats::chisq.test to a two-way tabyl — chisq.test","text":"","code":"tab <- tabyl(mtcars, gear, cyl) chisq.test(tab) #> Warning: Chi-squared approximation may be incorrect #>  #> \tPearson's Chi-squared test #>  #> data:  tab #> X-squared = 18.036, df = 4, p-value = 0.001214 #>  chisq.test(tab)$residuals #> Warning: Chi-squared approximation may be incorrect #>  gear          4           6          8 #>     3 -1.8303523 -0.70731720  2.1225827 #>     4  1.9079181  0.84866842 -2.2912878 #>     5  0.2145291 -0.08964215 -0.1267731"},{"path":"https://sfirke.github.io/janitor/reference/clean_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans names of an object (usually a data.frame). — clean_names","title":"Cleans names of an object (usually a data.frame). — clean_names","text":"Resulting names unique consist _ character, numbers, letters. Capitalization preferences can specified using case parameter. Accented characters transliterated ASCII.  example, \"o\" German umlaut becomes \"o\", Spanish character \"enye\" becomes \"n\". function takes returns data.frame, ease piping `%>%`. underlying function works character vector names, see make_clean_names.  clean_names relies versatile function to_any_case, accepts many arguments.  See function's documentation ideas getting clean_names.  examples included . common issue micro/mu symbol replaced \"m\" instead \"u\". replacement \"m\" correct Greek--ASCII transliteration less correct scientific data--ASCII transliteration.  warning generated \"m\" replacement occurs. replace \"u\", please add argument replace=janitor:::mu_to_u character vector mapping known mu micro Unicode code points (characters) \"u\".","code":""},{"path":"https://sfirke.github.io/janitor/reference/clean_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans names of an object (usually a data.frame). — clean_names","text":"","code":"clean_names(dat, ...)  # S3 method for default clean_names(dat, ...)  # S3 method for sf clean_names(dat, ...)  # S3 method for tbl_graph clean_names(dat, ...)  # S3 method for tbl_lazy clean_names(dat, ...)"},{"path":"https://sfirke.github.io/janitor/reference/clean_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans names of an object (usually a data.frame). — clean_names","text":"dat input data.frame. ... Arguments passed make_clean_names case desired target case (default \"snake\") passed snakecase::to_any_case() exception \"old_janitor\", exists support legacy code (preserves behavior clean_names() prior addition \"case\" argument (janitor versions <= 0.3.1).  \"old_janitor\" intended new code. See to_any_case wide variety supported cases, including \"sentence\" \"title\" case. replace named character vector name replaced value. ascii Convert names ASCII (TRUE, default) (FALSE). use_make_names make.names() applied ensure output usable name without quoting?  (Avoiding make.names() ensures output locale-independent quoting may required.) allow_dupes Allow duplicates returned names (TRUE) (FALSE, default). sep_in (short separator input) character, interpreted regular expression (wrapped internally stringr::regex()).  default value regular expression matches sequence non-alphanumeric values. matches replaced underscores  (additionally \"_\" \" \", always true, even NULL supplied). underscores used internally split strings substrings specify word boundaries. parsing_option integer determine parsing_option. 1: \"RRRStudio\" -> \"RRR_Studio\" 2: \"RRRStudio\" -> \"RRRS_tudio\" 3: \"RRRStudio\" -> \"RRRSStudio\". become example \"Rrrstudio\" convert lower camel case. -1, -2, -3: parsing_options's suppress conversion non-alphanumeric values. 0: parsing transliterations character vector (NULL). entries argument need elements stringi::stri_trans_list() (like \"Latin-ASCII\", often useful) names lookup tables (currently \"german\" supported). order entries letters input  string transliterated via stringi::stri_trans_general() replaced via   matches lookup table. named character elements supplied part `transliterations`, anything matches names replaced corresponding value. use feature care case case = \"parsed\", case = \"internal_parsing\"  case = \"none\", since upper case letters, transliterations/replacements  length 2, second letter transliterated lowercase, example Oe, Ae, Ss,  might always intended. case can make usage option supply named elements specify transliterations . numerals character specifying alignment numerals (\"middle\", left, right, asis tight). .e. numerals = \"left\" ensures output separator front digit.","code":""},{"path":"https://sfirke.github.io/janitor/reference/clean_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans names of an object (usually a data.frame). — clean_names","text":"Returns data.frame clean names.","code":""},{"path":"https://sfirke.github.io/janitor/reference/clean_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cleans names of an object (usually a data.frame). — clean_names","text":"clean_names() intended used data.frames   data.frame-like objects. reason methods   support using clean_names() sf tbl_graph (  tidygraph) objects well database connections   dbplyr. cleaning named objects like named lists   vectors, use make_clean_names().","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/clean_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleans names of an object (usually a data.frame). — clean_names","text":"","code":"# --- Simple Usage --- x <- data.frame(caseID = 1, DOB = 2, Other = 3) clean_names(x) #>   case_id dob other #> 1       1   2     3  # or pipe in the input data.frame: x %>%   clean_names() #>   case_id dob other #> 1       1   2     3  # if you prefer camelCase variable names: x %>%   clean_names(., \"lower_camel\") #>   caseId dob other #> 1      1   2     3  # (not run) run clean_names after reading in a spreadsheet: # library(readxl) # read_excel(\"messy_excel_file.xlsx\") %>% #   clean_names()  # --- Taking advantage of the underlying snakecase::to_any_case arguments ---  # Restore column names to Title Case, e.g., for plotting mtcars %>%   clean_names(case = \"title\") #>                      Mpg Cyl  Disp  Hp Drat    Wt  Qsec Vs Am Gear Carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # Tell clean_names to leave certain abbreviations untouched: x %>%   clean_names(case = \"upper_camel\", abbreviations = c(\"ID\", \"DOB\")) #>   CaseID DOB Other #> 1      1   2     3"},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a comparison of data.frames (or similar objects) that indicates if\nthey will successfully bind together by rows. — compare_df_cols","title":"Generate a comparison of data.frames (or similar objects) that indicates if\nthey will successfully bind together by rows. — compare_df_cols","text":"Generate comparison data.frames (similar objects) indicates successfully bind together rows.","code":""},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a comparison of data.frames (or similar objects) that indicates if\nthey will successfully bind together by rows. — compare_df_cols","text":"","code":"compare_df_cols(   ...,   return = c(\"all\", \"match\", \"mismatch\"),   bind_method = c(\"bind_rows\", \"rbind\"),   strict_description = FALSE )"},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a comparison of data.frames (or similar objects) that indicates if\nthey will successfully bind together by rows. — compare_df_cols","text":"... combination data.frames, tibbles, lists data.frames/tibbles.  values may optionally named arguments; named, output column name; named, output column data.frame name (see examples section). return summary \"\" columns returned, return \"match\"ing columns, \"mismatch\"ing columns? bind_method method binding used determine matches? \"bind_rows\", columns missing data.frame considered match (dplyr::bind_rows(); \"rbind\", columns missing data.frame considered mismatch (base::rbind(). strict_description Passed describe_class.  Also, see Details section.","code":""},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a comparison of data.frames (or similar objects) that indicates if\nthey will successfully bind together by rows. — compare_df_cols","text":"data.frame column named \"column_name\" value named   input data.frames' column names, one column per   data.frame (named input data.frame).  one input   column name, column naming suffixes defined   sequential use base::merge() may differ expected naming.   rows within data.frame-named columns descriptions   classes data within columns (generated  describe_class).","code":""},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a comparison of data.frames (or similar objects) that indicates if\nthey will successfully bind together by rows. — compare_df_cols","text":"Due returned \"column_name\" column, input data.frame may   named \"column_name\". strict_description argument typically used understand   factor levels match bindable.  Factors typically bindable,   behavior happens bind differs based   binding method (\"bind_rows\" \"rbind\").  Even   strict_description FALSE, data.frames may still bind   classes (like factors characters) can bind even   appear differ.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a comparison of data.frames (or similar objects) that indicates if\nthey will successfully bind together by rows. — compare_df_cols","text":"","code":"compare_df_cols(data.frame(A = 1), data.frame(B = 2)) #>   column_name data.frame(A = 1) data.frame(B = 2) #> 1           A           numeric              <NA> #> 2           B              <NA>           numeric # user-defined names compare_df_cols(dfA = data.frame(A = 1), dfB = data.frame(B = 2)) #>   column_name     dfA     dfB #> 1           A numeric    <NA> #> 2           B    <NA> numeric # a combination of list and data.frame input compare_df_cols(listA = list(dfA = data.frame(A = 1), dfB = data.frame(B = 2)), data.frame(A = 3)) #>   column_name     dfA     dfB data.frame(A = 3) #> 1           A numeric    <NA>           numeric #> 2           B    <NA> numeric              <NA>"},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols_same.html","id":null,"dir":"Reference","previous_headings":"","what":"Do the the data.frames have the same columns & types? — compare_df_cols_same","title":"Do the the data.frames have the same columns & types? — compare_df_cols_same","text":"Check whether set data.frames row-bindable.  Calls compare_df_cols()returns TRUE mis-matching rows.  `","code":""},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols_same.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do the the data.frames have the same columns & types? — compare_df_cols_same","text":"","code":"compare_df_cols_same(   ...,   bind_method = c(\"bind_rows\", \"rbind\"),   verbose = TRUE )"},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols_same.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do the the data.frames have the same columns & types? — compare_df_cols_same","text":"... combination data.frames, tibbles, lists data.frames/tibbles.  values may optionally named arguments; named, output column name; named, output column data.frame name (see examples section). bind_method method binding used determine matches? \"bind_rows\", columns missing data.frame considered match (dplyr::bind_rows(); \"rbind\", columns missing data.frame considered mismatch (base::rbind(). verbose Print mismatching columns binding fail.","code":""},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols_same.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do the the data.frames have the same columns & types? — compare_df_cols_same","text":"TRUE row binding succeed FALSE   fail.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/compare_df_cols_same.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do the the data.frames have the same columns & types? — compare_df_cols_same","text":"","code":"compare_df_cols_same(data.frame(A = 1), data.frame(A = 2)) #> [1] TRUE compare_df_cols_same(data.frame(A = 1), data.frame(B = 2)) #> [1] TRUE compare_df_cols_same(data.frame(A = 1), data.frame(B = 2), verbose = FALSE) #> [1] TRUE compare_df_cols_same(data.frame(A = 1), data.frame(B = 2), bind_method = \"rbind\") #>   column_name     ..1     ..2 #> 1           A numeric    <NA> #> 2           B    <NA> numeric #> [1] FALSE"},{"path":"https://sfirke.github.io/janitor/reference/convert_to_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert string values to true NA values. — convert_to_NA","title":"Convert string values to true NA values. — convert_to_NA","text":"Converts instances user-specified strings NA.  Can operate either single vector entire data.frame.","code":""},{"path":"https://sfirke.github.io/janitor/reference/convert_to_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert string values to true NA values. — convert_to_NA","text":"","code":"convert_to_NA(dat, strings)"},{"path":"https://sfirke.github.io/janitor/reference/convert_to_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert string values to true NA values. — convert_to_NA","text":"dat vector data.frame operate . strings character vector strings convert.","code":""},{"path":"https://sfirke.github.io/janitor/reference/convert_to_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert string values to true NA values. — convert_to_NA","text":"Returns cleaned object.  Can vector, data.frame, tibble::tbl_df depending provided input.","code":""},{"path":"https://sfirke.github.io/janitor/reference/convert_to_NA.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Convert string values to true NA values. — convert_to_NA","text":"Deprecated, use new code. Use dplyr::na_if() instead.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/convert_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert many date and datetime formats as may be received from Microsoft\nExcel — convert_to_date","title":"Convert many date and datetime formats as may be received from Microsoft\nExcel — convert_to_date","text":"Convert many date datetime formats may received Microsoft Excel","code":""},{"path":"https://sfirke.github.io/janitor/reference/convert_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert many date and datetime formats as may be received from Microsoft\nExcel — convert_to_date","text":"","code":"convert_to_date(   x,   ...,   character_fun = lubridate::ymd,   string_conversion_failure = c(\"error\", \"warning\") )  convert_to_datetime(   x,   ...,   tz = \"UTC\",   character_fun = lubridate::ymd_hms,   string_conversion_failure = c(\"error\", \"warning\") )"},{"path":"https://sfirke.github.io/janitor/reference/convert_to_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert many date and datetime formats as may be received from Microsoft\nExcel — convert_to_date","text":"x object convert ... Passed methods.  Eventually may passed `excel_numeric_to_date()`, `base::.POSIXct()`, `base::.Date()`. character_fun function convert non-numeric-looking, non-NA values `x` POSIXct objects. string_conversion_failure character value fails parse desired class instead returns `NA`, function return result warning throw error? tz timezone POSIXct output, unless object POSIXt already.  Ignored Date output.","code":""},{"path":"https://sfirke.github.io/janitor/reference/convert_to_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert many date and datetime formats as may be received from Microsoft\nExcel — convert_to_date","text":"POSIXct objects `convert_to_datetime()` Date objects   `convert_to_date()`.","code":""},{"path":"https://sfirke.github.io/janitor/reference/convert_to_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert many date and datetime formats as may be received from Microsoft\nExcel — convert_to_date","text":"Character conversion checks matches something looks like   Microsoft Excel numeric date, converts numeric, runs   convert_to_datetime_helper() numbers.  , character Date   POSIXct conversion occurs via `character_fun(x, ...)`   `character_fun(x, tz=tz, ...)`, respectively.","code":""},{"path":"https://sfirke.github.io/janitor/reference/convert_to_date.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert many date and datetime formats as may be received from Microsoft\nExcel — convert_to_date","text":"convert_to_datetime(): Convert date-time (POSIXct)","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/convert_to_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert many date and datetime formats as may be received from Microsoft\nExcel — convert_to_date","text":"","code":"convert_to_date(\"2009-07-06\") #> [1] \"2009-07-06\" convert_to_date(40000) #> [1] \"2009-07-06\" convert_to_date(\"40000.1\") #> [1] \"2009-07-06\" # Mixed date source data can be provided. convert_to_date(c(\"2020-02-29\", \"40000.1\")) #> [1] \"2020-02-29\" \"2009-07-06\" convert_to_datetime(   c(\"2009-07-06\", \"40000.1\", \"40000\", NA),   character_fun = lubridate::ymd_h, truncated = 1, tz = \"UTC\" ) #> [1] \"2009-07-06 00:00:00 UTC\" \"2009-07-06 02:24:00 UTC\" #> [3] \"2009-07-06 00:00:00 UTC\" NA"},{"path":"https://sfirke.github.io/janitor/reference/crosstab.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a crosstabulation of two vectors. — crosstab","title":"Generate a crosstabulation of two vectors. — crosstab","text":"function deprecated, use tabyl(dat, var1, var2) instead.","code":""},{"path":"https://sfirke.github.io/janitor/reference/crosstab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a crosstabulation of two vectors. — crosstab","text":"","code":"crosstab(...)"},{"path":"https://sfirke.github.io/janitor/reference/crosstab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a crosstabulation of two vectors. — crosstab","text":"... arguments","code":""},{"path":"https://sfirke.github.io/janitor/reference/describe_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe the class(es) of an object — describe_class","title":"Describe the class(es) of an object — describe_class","text":"Describe class(es) object","code":""},{"path":"https://sfirke.github.io/janitor/reference/describe_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe the class(es) of an object — describe_class","text":"","code":"describe_class(x, strict_description = TRUE)  # S3 method for factor describe_class(x, strict_description = TRUE)  # S3 method for default describe_class(x, strict_description = TRUE)"},{"path":"https://sfirke.github.io/janitor/reference/describe_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe the class(es) of an object — describe_class","text":"x object describe strict_description differing factor levels treated differences purposes identifying mismatches? strict_description = `TRUE` stricter factors different levels treated different classes.  FALSE lenient: class comparison purposes, variable just \"factor\".","code":""},{"path":"https://sfirke.github.io/janitor/reference/describe_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe the class(es) of an object — describe_class","text":"character scalar describing class(es) object   scalar match, columns data.frame (similar object) bind   together without issue.","code":""},{"path":"https://sfirke.github.io/janitor/reference/describe_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Describe the class(es) of an object — describe_class","text":"package developers, S3 generic method can written   describe_class() custom classes may need definition   default method.  function called compare_df_cols.","code":""},{"path":"https://sfirke.github.io/janitor/reference/describe_class.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Describe the class(es) of an object — describe_class","text":"describe_class(factor): Describe factors levels ordered. describe_class(default): List classes object.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/describe_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe the class(es) of an object — describe_class","text":"","code":"describe_class(1) #> [1] \"numeric\" describe_class(factor(\"A\")) #> [1] \"factor(levels=c(\\\"A\\\"))\" describe_class(ordered(c(\"A\", \"B\"))) #> [1] \"ordered, factor(levels=c(\\\"A\\\", \\\"B\\\"))\" describe_class(ordered(c(\"A\", \"B\")), strict_description = FALSE) #> [1] \"factor\""},{"path":"https://sfirke.github.io/janitor/reference/excel_numeric_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dates encoded as serial numbers to Date class. — excel_numeric_to_date","title":"Convert dates encoded as serial numbers to Date class. — excel_numeric_to_date","text":"Converts numbers like 42370 date values like 2016-01-01. Defaults modern Excel date encoding system. However, Excel Mac 2008 earlier Mac versions Excel used different date system. determine platform specify: date 2016-01-01 represented number 42370 spreadsheet, modern system.  40908, old Mac system. date encoding systems http://support.office.com/en-us/article/Date-calculations--Excel-e7fe7167-48a9-4b96-bb53-5612a800b487. list timezones available base::OlsonNames(), current timezone available base::Sys.timezone(). input data mix Excel numeric dates actual dates, see powerful functions convert_to_date() convert_to_datetime().","code":""},{"path":"https://sfirke.github.io/janitor/reference/excel_numeric_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dates encoded as serial numbers to Date class. — excel_numeric_to_date","text":"","code":"excel_numeric_to_date(   date_num,   date_system = \"modern\",   include_time = FALSE,   round_seconds = TRUE,   tz = Sys.timezone() )"},{"path":"https://sfirke.github.io/janitor/reference/excel_numeric_to_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dates encoded as serial numbers to Date class. — excel_numeric_to_date","text":"date_num numeric vector serial numbers convert. date_system date system, either \"modern\" \"mac pre-2011\". include_time Include time (hours, minutes, seconds) output? (See details) round_seconds Round seconds integer (effect include_time TRUE)? tz Time zone, used include_time = TRUE (see details information timezones).","code":""},{"path":"https://sfirke.github.io/janitor/reference/excel_numeric_to_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dates encoded as serial numbers to Date class. — excel_numeric_to_date","text":"Returns vector class Date include_time  FALSE.  Returns vector class POSIXlt include_time  TRUE.","code":""},{"path":"https://sfirke.github.io/janitor/reference/excel_numeric_to_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert dates encoded as serial numbers to Date class. — excel_numeric_to_date","text":"using include_time=TRUE, days leap seconds   accurately handled appear accurately handled   Windows (described   https://support.microsoft.com/en-us/help/2722715/support---leap-second).","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/excel_numeric_to_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert dates encoded as serial numbers to Date class. — excel_numeric_to_date","text":"","code":"excel_numeric_to_date(40000) #> [1] \"2009-07-06\" excel_numeric_to_date(40000.5) # No time is included #> [1] \"2009-07-06\" excel_numeric_to_date(40000.5, include_time = TRUE) # Time is included #> [1] \"2009-07-06 12:00:00 UTC\" excel_numeric_to_date(40000.521, include_time = TRUE) # Time is included #> [1] \"2009-07-06 12:30:14 UTC\" excel_numeric_to_date(40000.521,   include_time = TRUE,   round_seconds = FALSE ) # Time with fractional seconds is included #> [1] \"2009-07-06 12:30:14 UTC\""},{"path":"https://sfirke.github.io/janitor/reference/find_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the header row in a data.frame — find_header","title":"Find the header row in a data.frame — find_header","text":"Find header row data.frame","code":""},{"path":"https://sfirke.github.io/janitor/reference/find_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the header row in a data.frame — find_header","text":"","code":"find_header(dat, ...)"},{"path":"https://sfirke.github.io/janitor/reference/find_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the header row in a data.frame — find_header","text":"dat input data.frame ... See details","code":""},{"path":"https://sfirke.github.io/janitor/reference/find_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the header row in a data.frame — find_header","text":"row number header row","code":""},{"path":"https://sfirke.github.io/janitor/reference/find_header.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the header row in a data.frame — find_header","text":"... missing, first row missing values used. searching specified value value within column, first row match returned, regardless completeness rest row.  ... single character argument, first column searched value.  ... named numeric argument, column whose position number matches value argument searched name (see last example ).  one row found matching value searched , number first matching row returned (warning).","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/find_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the header row in a data.frame — find_header","text":"","code":"# the first row find_header(data.frame(A = \"B\")) #> [1] 1 # the second row find_header(data.frame(A = c(NA, \"B\"))) #> [1] 2 # the second row since the first has an empty value find_header(data.frame(A = c(NA, \"B\"), B = c(\"C\", \"D\"))) #> [1] 2 # The third row because the second column was searched for the text \"E\" find_header(data.frame(A = c(NA, \"B\", \"C\", \"D\"), B = c(\"C\", \"D\", \"E\", \"F\")), \"E\" = 2) #> [1] 3"},{"path":"https://sfirke.github.io/janitor/reference/fisher.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply stats::fisher.test to a two-way tabyl — fisher.test","title":"Apply stats::fisher.test to a two-way tabyl — fisher.test","text":"generic function overrides stats::fisher.test. passed table two-way tabyl, runs janitor::fisher.test.tabyl, otherwise just calls stats::fisher.test.","code":""},{"path":"https://sfirke.github.io/janitor/reference/fisher.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply stats::fisher.test to a two-way tabyl — fisher.test","text":"","code":"fisher.test(x, ...)  # S3 method for default fisher.test(x, y = NULL, ...)  # S3 method for tabyl fisher.test(x, ...)"},{"path":"https://sfirke.github.io/janitor/reference/fisher.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply stats::fisher.test to a two-way tabyl — fisher.test","text":"x two-way tabyl, numeric vector factor ... parameters passed stats::fisher.test y x vector, must another vector factor length","code":""},{"path":"https://sfirke.github.io/janitor/reference/fisher.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply stats::fisher.test to a two-way tabyl — fisher.test","text":"result one stats::fisher.test.","code":""},{"path":"https://sfirke.github.io/janitor/reference/fisher.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply stats::fisher.test to a two-way tabyl — fisher.test","text":"","code":"tab <- tabyl(mtcars, gear, cyl) fisher.test(tab) #>  #> \tFisher's Exact Test for Count Data #>  #> data:  tab #> p-value = 8.26e-05 #> alternative hypothesis: two.sided #>"},{"path":"https://sfirke.github.io/janitor/reference/get_dupes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rows of a data.frame with identical values for the specified variables. — get_dupes","title":"Get rows of a data.frame with identical values for the specified variables. — get_dupes","text":"hunting duplicate records data cleaning.  Specify data.frame variable combination search duplicates get back duplicated rows.","code":""},{"path":"https://sfirke.github.io/janitor/reference/get_dupes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rows of a data.frame with identical values for the specified variables. — get_dupes","text":"","code":"get_dupes(dat, ...)"},{"path":"https://sfirke.github.io/janitor/reference/get_dupes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rows of a data.frame with identical values for the specified variables. — get_dupes","text":"dat input data.frame. ... Unquoted variable names search duplicates. takes tidyselect specification.","code":""},{"path":"https://sfirke.github.io/janitor/reference/get_dupes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rows of a data.frame with identical values for the specified variables. — get_dupes","text":"Returns data.frame full records specified variables duplicated values, well variable dupe_count showing number rows sharing combination duplicated values. input data.frame class tbl_df, output well.","code":""},{"path":"https://sfirke.github.io/janitor/reference/get_dupes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get rows of a data.frame with identical values for the specified variables. — get_dupes","text":"","code":"get_dupes(mtcars, mpg, hp) #>   mpg  hp dupe_count cyl disp drat    wt  qsec vs am gear carb #> 1  21 110          2   6  160  3.9 2.620 16.46  0  1    4    4 #> 2  21 110          2   6  160  3.9 2.875 17.02  0  1    4    4  # or called with the magrittr pipe %>% : mtcars %>% get_dupes(wt) #>     wt dupe_count  mpg cyl  disp  hp drat  qsec vs am gear carb #> 1 3.44          3 18.7   8 360.0 175 3.15 17.02  0  0    3    2 #> 2 3.44          3 19.2   6 167.6 123 3.92 18.30  1  0    4    4 #> 3 3.44          3 17.8   6 167.6 123 3.92 18.90  1  0    4    4 #> 4 3.57          2 14.3   8 360.0 245 3.21 15.84  0  0    3    4 #> 5 3.57          2 15.0   8 301.0 335 3.54 14.60  0  1    5    8  # You can use tidyselect helpers to specify variables: mtcars %>% get_dupes(-c(wt, qsec)) #>   mpg cyl disp  hp drat vs am gear carb dupe_count    wt  qsec #> 1  21   6  160 110  3.9  0  1    4    4          2 2.620 16.46 #> 2  21   6  160 110  3.9  0  1    4    4          2 2.875 17.02 mtcars %>% get_dupes(starts_with(\"cy\")) #>    cyl dupe_count  mpg  disp  hp drat    wt  qsec vs am gear carb #> 1    8         14 18.7 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 2    8         14 14.3 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 3    8         14 16.4 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 4    8         14 17.3 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 5    8         14 15.2 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 6    8         14 10.4 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 7    8         14 10.4 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 8    8         14 14.7 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 9    8         14 15.5 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 10   8         14 15.2 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 11   8         14 13.3 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 12   8         14 19.2 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 13   8         14 15.8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 14   8         14 15.0 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 15   4         11 22.8 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 16   4         11 24.4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 17   4         11 22.8 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 18   4         11 32.4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19   4         11 30.4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20   4         11 33.9  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21   4         11 21.5 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22   4         11 27.3  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 23   4         11 26.0 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 24   4         11 30.4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 25   4         11 21.4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> 26   6          7 21.0 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 27   6          7 21.0 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 28   6          7 21.4 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 29   6          7 18.1 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 30   6          7 19.2 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 31   6          7 17.8 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 32   6          7 19.7 145.0 175 3.62 2.770 15.50  0  1    5    6"},{"path":"https://sfirke.github.io/janitor/reference/get_one_to_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the list of columns that have a 1:1 mapping to each other — get_one_to_one","title":"Find the list of columns that have a 1:1 mapping to each other — get_one_to_one","text":"Find list columns 1:1 mapping ","code":""},{"path":"https://sfirke.github.io/janitor/reference/get_one_to_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the list of columns that have a 1:1 mapping to each other — get_one_to_one","text":"","code":"get_one_to_one(dat)"},{"path":"https://sfirke.github.io/janitor/reference/get_one_to_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the list of columns that have a 1:1 mapping to each other — get_one_to_one","text":"dat data.frame similar object","code":""},{"path":"https://sfirke.github.io/janitor/reference/get_one_to_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the list of columns that have a 1:1 mapping to each other — get_one_to_one","text":"list one element group columns map   identically .","code":""},{"path":"https://sfirke.github.io/janitor/reference/get_one_to_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the list of columns that have a 1:1 mapping to each other — get_one_to_one","text":"","code":"foo <- data.frame(   Lab_Test_Long = c(\"Cholesterol, LDL\", \"Cholesterol, LDL\", \"Glucose\"),   Lab_Test_Short = c(\"CLDL\", \"CLDL\", \"GLUC\"),   LOINC = c(12345, 12345, 54321),   Person = c(\"Sam\", \"Bill\", \"Sam\"),   stringsAsFactors = FALSE ) get_one_to_one(foo) #> [[1]] #> [1] \"Lab_Test_Long\"  \"Lab_Test_Short\" \"LOINC\"          #>"},{"path":"https://sfirke.github.io/janitor/reference/janitor.html","id":null,"dir":"Reference","previous_headings":"","what":"janitor — janitor","title":"janitor — janitor","text":"janitor simple little tools examining cleaning dirty data.","code":""},{"path":"https://sfirke.github.io/janitor/reference/janitor.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main functions","title":"janitor — janitor","text":"main janitor functions can: perfectly format ugly data.frame column names; isolate duplicate records study; provide quick one- two-variable tabulations (.e., frequency tables crosstabs) improve base R function table(). functions package can format reporting results tabulations. tabulate--report functions approximate popular features SPSS Microsoft Excel.","code":""},{"path":"https://sfirke.github.io/janitor/reference/janitor.html","id":"package-context","dir":"Reference","previous_headings":"","what":"Package context","title":"janitor — janitor","text":"package follows principles \"tidyverse\" particular works well %>% pipe function. janitor built beginning--intermediate R users mind optimized user-friendliness.  Advanced users can already everything covered , can faster janitor save thinking fun tasks.","code":""},{"path":"https://sfirke.github.io/janitor/reference/janitor_deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Functions in Package janitor — janitor_deprecated","title":"Deprecated Functions in Package janitor — janitor_deprecated","text":"functions already become defunct may defunct soon next release.","code":""},{"path":"https://sfirke.github.io/janitor/reference/janitor_deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated Functions in Package janitor — janitor_deprecated","text":"adorn_crosstab crosstab use_first_valid_of convert_to_NA add_totals_col add_totals_row remove_empty_rows remove_empty_cols","code":""},{"path":"https://sfirke.github.io/janitor/reference/make_clean_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans a vector of text, typically containing the names of an object. — make_clean_names","title":"Cleans a vector of text, typically containing the names of an object. — make_clean_names","text":"Resulting strings unique consist _ character, numbers, letters. default, resulting strings consist ASCII characters, non-ASCII (e.g. Unicode) may allowed setting ascii=FALSE.  Capitalization preferences can specified using case parameter. use names data.frame, e.g., `%>%` pipeline, call convenience function clean_names. ascii=TRUE (default), accented characters transliterated ASCII.  example, \"o\" German umlaut becomes \"o\", Spanish character \"enye\" becomes \"n\". order operations : make replacements, (optional) ASCII conversion, remove initial spaces punctuation, apply base::make.names(), apply snakecase::to_any_case, add numeric suffixes resolve duplicated names. function relies snakecase::to_any_case can take advantage versatility.  instance, abbreviation like \"ID\" can capitalization preserved passing argument abbreviations = \"ID\". See documentation snakecase::to_any_case use features. systems, transliterators ASCII available.  case system, available transliterators used, warning issued per session indicating results may different run different system.  warning can disabled options(janitor_warn_transliterators=FALSE). objective call make_clean_names() translate ASCII, try following instead: stringi::stri_trans_general(x, id=\"-Latin;Greek-Latin;Latin-ASCII\").","code":""},{"path":"https://sfirke.github.io/janitor/reference/make_clean_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans a vector of text, typically containing the names of an object. — make_clean_names","text":"","code":"make_clean_names(   string,   case = \"snake\",   replace = c(`'` = \"\", `\"` = \"\", `%` = \"_percent_\", `#` = \"_number_\"),   ascii = TRUE,   use_make_names = TRUE,   allow_dupes = FALSE,   sep_in = \"\\\\.\",   transliterations = \"Latin-ASCII\",   parsing_option = 1,   numerals = \"asis\",   ... )"},{"path":"https://sfirke.github.io/janitor/reference/make_clean_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans a vector of text, typically containing the names of an object. — make_clean_names","text":"string character vector names clean. case desired target case (default \"snake\") passed snakecase::to_any_case() exception \"old_janitor\", exists support legacy code (preserves behavior clean_names() prior addition \"case\" argument (janitor versions <= 0.3.1).  \"old_janitor\" intended new code. See to_any_case wide variety supported cases, including \"sentence\" \"title\" case. replace named character vector name replaced value. ascii Convert names ASCII (TRUE, default) (FALSE). use_make_names make.names() applied ensure output usable name without quoting?  (Avoiding make.names() ensures output locale-independent quoting may required.) allow_dupes Allow duplicates returned names (TRUE) (FALSE, default). sep_in (short separator input) character, interpreted regular expression (wrapped internally stringr::regex()).  default value regular expression matches sequence non-alphanumeric values. matches replaced underscores  (additionally \"_\" \" \", always true, even NULL supplied). underscores used internally split strings substrings specify word boundaries. transliterations character vector (NULL). entries argument need elements stringi::stri_trans_list() (like \"Latin-ASCII\", often useful) names lookup tables (currently \"german\" supported). order entries letters input  string transliterated via stringi::stri_trans_general() replaced via   matches lookup table. named character elements supplied part `transliterations`, anything matches names replaced corresponding value. use feature care case case = \"parsed\", case = \"internal_parsing\"  case = \"none\", since upper case letters, transliterations/replacements  length 2, second letter transliterated lowercase, example Oe, Ae, Ss,  might always intended. case can make usage option supply named elements specify transliterations . parsing_option integer determine parsing_option. 1: \"RRRStudio\" -> \"RRR_Studio\" 2: \"RRRStudio\" -> \"RRRS_tudio\" 3: \"RRRStudio\" -> \"RRRSStudio\". become example \"Rrrstudio\" convert lower camel case. -1, -2, -3: parsing_options's suppress conversion non-alphanumeric values. 0: parsing numerals character specifying alignment numerals (\"middle\", left, right, asis tight). .e. numerals = \"left\" ensures output separator front digit. ... Arguments passed snakecase::to_any_case abbreviations character. (Case insensitive) matched abbreviations surrounded underscores. way, can get recognized parser. useful e.g. parsing_option 1 needed use case, abbreviations substrings require parsing_option 2. Furthermore, argument also specifies formatting abbreviations output cases title, mixed, lower upper camel. E.g. upper camel first letter always upper case, abbreviation supplied upper case, also visible output. Use feature care: One letter abbreviations abbreviations next hard read also easy parse processing. sep_out (short separator output) String used separator. defaults \"_\"  \"\", regarding specified case. length(sep_out) > 1, last element sep_out gets recycled separators incorporated per string according order. unique_sep string. NULL, duplicated names get  suffix integer order appearance. suffix separated supplied string  argument. empty_fill string. supplied, entry matches \"\" replaced supplied string argument. prefix prefix (string). postfix postfix (string).","code":""},{"path":"https://sfirke.github.io/janitor/reference/make_clean_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans a vector of text, typically containing the names of an object. — make_clean_names","text":"Returns \"cleaned\" character vector.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/make_clean_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleans a vector of text, typically containing the names of an object. — make_clean_names","text":"","code":"# cleaning the names of a vector: x <- structure(1:3, names = c(\"name with space\", \"TwoWords\", \"total $ (2009)\")) x #> name with space        TwoWords  total $ (2009)  #>               1               2               3  names(x) <- make_clean_names(names(x)) x # now has cleaned names #> name_with_space       two_words      total_2009  #>               1               2               3   # if you prefer camelCase variable names: make_clean_names(names(x), \"small_camel\") #> [1] \"nameWithSpace\" \"twoWords\"      \"total2009\"      # similar to janitor::clean_names(poorly_named_df): # not run: # make_clean_names(names(poorly_named_df))"},{"path":"https://sfirke.github.io/janitor/reference/mu_to_u.html","id":null,"dir":"Reference","previous_headings":"","what":"Constant to help map from mu to u — mu_to_u","title":"Constant to help map from mu to u — mu_to_u","text":"character vector names known Unicode code points look like Greek mu micro symbol values \"u\".  intended simplify mapping mu micro Unicode character \"u\" clean_names() make_clean_names().","code":""},{"path":"https://sfirke.github.io/janitor/reference/mu_to_u.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constant to help map from mu to u — mu_to_u","text":"","code":"mu_to_u"},{"path":"https://sfirke.github.io/janitor/reference/mu_to_u.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constant to help map from mu to u — mu_to_u","text":"object class character length 10.","code":""},{"path":"https://sfirke.github.io/janitor/reference/mu_to_u.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constant to help map from mu to u — mu_to_u","text":"See help clean_names() use .","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/paste_skip_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Like paste(), but missing values are omitted — paste_skip_na","title":"Like paste(), but missing values are omitted — paste_skip_na","text":"Like paste(), missing values omitted","code":""},{"path":"https://sfirke.github.io/janitor/reference/paste_skip_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Like paste(), but missing values are omitted — paste_skip_na","text":"","code":"paste_skip_na(..., sep = \" \", collapse = NULL)"},{"path":"https://sfirke.github.io/janitor/reference/paste_skip_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Like paste(), but missing values are omitted — paste_skip_na","text":"..., sep, collapse See ?paste","code":""},{"path":"https://sfirke.github.io/janitor/reference/paste_skip_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Like paste(), but missing values are omitted — paste_skip_na","text":"character vector pasted values.","code":""},{"path":"https://sfirke.github.io/janitor/reference/paste_skip_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Like paste(), but missing values are omitted — paste_skip_na","text":"values missing, value first argument   preserved.","code":""},{"path":"https://sfirke.github.io/janitor/reference/paste_skip_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Like paste(), but missing values are omitted — paste_skip_na","text":"","code":"paste_skip_na(NA) # NA_character_ #> [1] NA paste_skip_na(\"A\", NA) # \"A\" #> [1] \"A\" paste_skip_na(\"A\", NA, c(NA, \"B\"), sep = \",\") # c(\"A\", \"A,B\") #> [1] \"A\"   \"A,B\""},{"path":"https://sfirke.github.io/janitor/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Exported magrittr package.  learn , run ?magrittr::`%>%`.","code":""},{"path":"https://sfirke.github.io/janitor/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://sfirke.github.io/janitor/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator — %>%","text":"","code":"mtcars %>%   tabyl(carb, cyl) %>%   adorn_totals() #>   carb  4 6  8 #>      1  5 2  0 #>      2  6 0  4 #>      3  0 0  3 #>      4  0 4  6 #>      6  0 1  0 #>      8  0 0  1 #>  Total 11 7 14"},{"path":"https://sfirke.github.io/janitor/reference/remove_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove constant columns from a data.frame or matrix. — remove_constant","title":"Remove constant columns from a data.frame or matrix. — remove_constant","text":"Remove constant columns data.frame matrix.","code":""},{"path":"https://sfirke.github.io/janitor/reference/remove_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove constant columns from a data.frame or matrix. — remove_constant","text":"","code":"remove_constant(dat, na.rm = FALSE, quiet = TRUE)"},{"path":"https://sfirke.github.io/janitor/reference/remove_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove constant columns from a data.frame or matrix. — remove_constant","text":"dat input data.frame matrix. na.rm NA values removed considering whether column constant?  default value FALSE result column removed mix single value NA. quiet messages suppressed (TRUE) printed (FALSE) indicating summary empty columns rows removed?","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/remove_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove constant columns from a data.frame or matrix. — remove_constant","text":"","code":"remove_constant(data.frame(A = 1, B = 1:3)) #>   B #> 1 1 #> 2 2 #> 3 3  # To find the columns that are constant data.frame(A = 1, B = 1:3) %>%   dplyr::select(!dplyr::all_of(names(remove_constant(.)))) %>%   unique() #>   A #> 1 1"},{"path":"https://sfirke.github.io/janitor/reference/remove_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","title":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","text":"Removes rows /columns data.frame matrix   composed entirely NA values.","code":""},{"path":"https://sfirke.github.io/janitor/reference/remove_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","text":"","code":"remove_empty(dat, which = c(\"rows\", \"cols\"), cutoff = 1, quiet = TRUE)"},{"path":"https://sfirke.github.io/janitor/reference/remove_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","text":"dat input data.frame matrix. one \"rows\", \"cols\", c(\"rows\", \"cols\").  value provided, defaults removing empty rows empty columns, declaring behavior printed message. cutoff fraction (>0 <=1) rows columns must empty removed? quiet messages suppressed (TRUE) printed (FALSE) indicating summary empty columns rows removed?","code":""},{"path":"https://sfirke.github.io/janitor/reference/remove_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","text":"Returns object without missing rows columns.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/remove_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","text":"","code":"# not run: # dat %>% remove_empty(\"rows\") # addressing a common untidy-data scenario where we have a mixture of # blank values in some (character) columns and NAs in others: library(dplyr) dd <- tibble(   x = c(LETTERS[1:5], NA, rep(\"\", 2)),   y = c(1:5, rep(NA, 3)) ) # remove_empty() drops row 5 (all NA) but not 6 and 7 (blanks + NAs) dd %>% remove_empty(\"rows\") #> # A tibble: 7 × 2 #>   x         y #>   <chr> <int> #> 1 \"A\"       1 #> 2 \"B\"       2 #> 3 \"C\"       3 #> 4 \"D\"       4 #> 5 \"E\"       5 #> 6 \"\"       NA #> 7 \"\"       NA # solution: preprocess to convert whitespace/empty strings to NA, # _then_ remove empty (all-NA) rows dd %>%   mutate(across(where(is.character), ~ na_if(trimws(.), \"\"))) %>%   remove_empty(\"rows\") #> # A tibble: 5 × 2 #>   x         y #>   <chr> <int> #> 1 A         1 #> 2 B         2 #> 3 C         3 #> 4 D         4 #> 5 E         5"},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes empty columns from a data.frame. — remove_empty_cols","title":"Removes empty columns from a data.frame. — remove_empty_cols","text":"function deprecated, use remove_empty(\"cols\") instead.","code":""},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes empty columns from a data.frame. — remove_empty_cols","text":"","code":"remove_empty_cols(dat)"},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes empty columns from a data.frame. — remove_empty_cols","text":"dat input data.frame.","code":""},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes empty columns from a data.frame. — remove_empty_cols","text":"Returns data.frame empty columns.","code":""},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes empty columns from a data.frame. — remove_empty_cols","text":"","code":"# not run: # dat %>% remove_empty_cols"},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes empty rows from a data.frame. — remove_empty_rows","title":"Removes empty rows from a data.frame. — remove_empty_rows","text":"function deprecated, use remove_empty(\"rows\") instead.","code":""},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes empty rows from a data.frame. — remove_empty_rows","text":"","code":"remove_empty_rows(dat)"},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes empty rows from a data.frame. — remove_empty_rows","text":"dat input data.frame.","code":""},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes empty rows from a data.frame. — remove_empty_rows","text":"Returns data.frame empty rows.","code":""},{"path":"https://sfirke.github.io/janitor/reference/remove_empty_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes empty rows from a data.frame. — remove_empty_rows","text":"","code":"# not run: # dat %>% remove_empty_rows"},{"path":"https://sfirke.github.io/janitor/reference/round_half_up.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a numeric vector; halves will be rounded up, ala Microsoft Excel. — round_half_up","title":"Round a numeric vector; halves will be rounded up, ala Microsoft Excel. — round_half_up","text":"base R round(), halves rounded even, e.g., 12.5 11.5 rounded 12.  function rounds 12.5 13 (assuming digits = 0).  Negative halves rounded away zero, e.g., -0.5 rounded -1. may skew subsequent statistical analysis data, may desirable certain contexts.  function implemented exactly https://stackoverflow.com//12688836; see question comments discussion issue.","code":""},{"path":"https://sfirke.github.io/janitor/reference/round_half_up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a numeric vector; halves will be rounded up, ala Microsoft Excel. — round_half_up","text":"","code":"round_half_up(x, digits = 0)"},{"path":"https://sfirke.github.io/janitor/reference/round_half_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a numeric vector; halves will be rounded up, ala Microsoft Excel. — round_half_up","text":"x numeric vector round. digits many digits displayed decimal point?","code":""},{"path":"https://sfirke.github.io/janitor/reference/round_half_up.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round a numeric vector; halves will be rounded up, ala Microsoft Excel. — round_half_up","text":"","code":"round_half_up(12.5) #> [1] 13 round_half_up(1.125, 2) #> [1] 1.13 round_half_up(1.125, 1) #> [1] 1.1 round_half_up(-0.5, 0) # negatives get rounded away from zero #> [1] -1"},{"path":"https://sfirke.github.io/janitor/reference/round_to_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to the nearest fraction of a specified denominator. — round_to_fraction","title":"Round to the nearest fraction of a specified denominator. — round_to_fraction","text":"Round decimal precise decimal value specified fractional denominator.  Common use cases include addressing floating point imprecision enforcing data values fall certain set. E.g., decimal represents hours values logged nearest minute, round_to_fraction(x, 60) enforce distribution 0.57 rounded 0.566667, equivalent 34/60.  0.56 also rounded 34/60. Set denominator = 1 round whole numbers. digits argument allows rounding subsequent result.","code":""},{"path":"https://sfirke.github.io/janitor/reference/round_to_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to the nearest fraction of a specified denominator. — round_to_fraction","text":"","code":"round_to_fraction(x, denominator, digits = Inf)"},{"path":"https://sfirke.github.io/janitor/reference/round_to_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to the nearest fraction of a specified denominator. — round_to_fraction","text":"x numeric vector denominator denominator fraction rounding (scalar vector positive integer). digits Integer indicating number decimal places used rounding fraction.  passed base::round()). Negative values allowed (see Details). (Inf indicates subsequent rounding)","code":""},{"path":"https://sfirke.github.io/janitor/reference/round_to_fraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round to the nearest fraction of a specified denominator. — round_to_fraction","text":"input x rounded decimal value integer numerator relative   denominator (possibly subsequently rounded number decimal   digits).","code":""},{"path":"https://sfirke.github.io/janitor/reference/round_to_fraction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round to the nearest fraction of a specified denominator. — round_to_fraction","text":"digits Inf, x rounded fraction   kept full precision.  digits \"auto\",   number digits automatically selected   ceiling(log10(denominator)) + 1.","code":""},{"path":"https://sfirke.github.io/janitor/reference/round_to_fraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to the nearest fraction of a specified denominator. — round_to_fraction","text":"","code":"round_to_fraction(1.6, denominator = 2) #> [1] 1.5 round_to_fraction(pi, denominator = 7) # 22/7 #> [1] 3.142857 round_to_fraction(c(8.1, 9.2), denominator = c(7, 8)) #> [1] 8.142857 9.250000 round_to_fraction(c(8.1, 9.2), denominator = c(7, 8), digits = 3) #> [1] 8.143 9.250 round_to_fraction(c(8.1, 9.2, 10.3), denominator = c(7, 8, 1001), digits = \"auto\") #> [1]  8.1400  9.2500 10.2997"},{"path":"https://sfirke.github.io/janitor/reference/row_to_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Elevate a row to be the column names of a data.frame. — row_to_names","title":"Elevate a row to be the column names of a data.frame. — row_to_names","text":"Elevate row column names data.frame.","code":""},{"path":"https://sfirke.github.io/janitor/reference/row_to_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elevate a row to be the column names of a data.frame. — row_to_names","text":"","code":"row_to_names(   dat,   row_number,   ...,   remove_row = TRUE,   remove_rows_above = TRUE,   sep = \"_\" )"},{"path":"https://sfirke.github.io/janitor/reference/row_to_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elevate a row to be the column names of a data.frame. — row_to_names","text":"dat input data.frame row_number row(s) dat containing variable names string \"find_header\" use find_header(dat=dat, ...) find row_number. Allows multiple rows input numeric vector. NA's ignored, column contains NA value named \"NA\". ... Sent find_header(), row_number = \"find_header\".  Otherwise, ignored. remove_row row row_number removed resulting data.frame? remove_rows_above row_number != 1, rows row_number - , 1:(row_number-1) - removed resulting data.frame? sep character string separate values case multiple rows input `row_number`.","code":""},{"path":"https://sfirke.github.io/janitor/reference/row_to_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elevate a row to be the column names of a data.frame. — row_to_names","text":"data.frame new names (rows removed, specified)","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/row_to_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elevate a row to be the column names of a data.frame. — row_to_names","text":"","code":"x <- data.frame(   X_1 = c(NA, \"Title\", 1:3),   X_2 = c(NA, \"Title2\", 4:6) ) x %>%   row_to_names(row_number = 2) #>   Title Title2 #> 3     1      4 #> 4     2      5 #> 5     3      6  x %>%   row_to_names(row_number = \"find_header\") #>   Title Title2 #> 3     1      4 #> 4     2      5 #> 5     3      6"},{"path":"https://sfirke.github.io/janitor/reference/sas_numeric_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a SAS date, time or date/time to an R object — sas_numeric_to_date","title":"Convert a SAS date, time or date/time to an R object — sas_numeric_to_date","text":"Convert SAS date, time date/time R object","code":""},{"path":"https://sfirke.github.io/janitor/reference/sas_numeric_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a SAS date, time or date/time to an R object — sas_numeric_to_date","text":"","code":"sas_numeric_to_date(date_num, datetime_num, time_num, tz = \"\")"},{"path":"https://sfirke.github.io/janitor/reference/sas_numeric_to_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a SAS date, time or date/time to an R object — sas_numeric_to_date","text":"date_num numeric vector serial numbers convert. datetime_num numeric vector date/time numbers (seconds since midnight 1960-01-01) convert time_num numeric vector time numbers (seconds since midnight current day) convert tz Time zone, used include_time = TRUE (see details information timezones).","code":""},{"path":"https://sfirke.github.io/janitor/reference/sas_numeric_to_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a SAS date, time or date/time to an R object — sas_numeric_to_date","text":"date time datetime provided, POSIXct object.    date provided, Date object.  time provided, hms::hms object","code":""},{"path":"https://sfirke.github.io/janitor/reference/sas_numeric_to_date.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert a SAS date, time or date/time to an R object — sas_numeric_to_date","text":"SAS Date, Time, Datetime Values reference (retrieved   2022-03-08): https://v8doc.sas.com/sashtml/lrcon/zenid-63.htm","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/reference/sas_numeric_to_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a SAS date, time or date/time to an R object — sas_numeric_to_date","text":"","code":"sas_numeric_to_date(date_num = 15639) # 2002-10-26 #> [1] \"2002-10-26\" sas_numeric_to_date(datetime_num = 1217083532, tz = \"UTC\") # 1998-07-26T14:45:32Z #> [1] \"1998-07-26 14:45:32 UTC\" sas_numeric_to_date(date_num = 15639, time_num = 3600, tz = \"UTC\") # 2002-10-26T01:00:00Z #> [1] \"2002-10-26 01:00:00 UTC\" sas_numeric_to_date(time_num = 3600) # 01:00:00 #> 01:00:00"},{"path":"https://sfirke.github.io/janitor/reference/signif_half_up.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a numeric vector to the specified number of significant digits; halves will be rounded up. — signif_half_up","title":"Round a numeric vector to the specified number of significant digits; halves will be rounded up. — signif_half_up","text":"base R signif(), halves rounded even, e.g., signif(11.5, 2) signif(12.5, 2) rounded 12. function rounds 12.5 13 (assuming digits = 2). Negative halves rounded away zero, e.g., signif(-2.5, 1) rounded -3. may skew subsequent statistical analysis data, may desirable certain contexts. function implemented https://stackoverflow.com//1581007/; see question comments discussion issue.","code":""},{"path":"https://sfirke.github.io/janitor/reference/signif_half_up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a numeric vector to the specified number of significant digits; halves will be rounded up. — signif_half_up","text":"","code":"signif_half_up(x, digits = 6)"},{"path":"https://sfirke.github.io/janitor/reference/signif_half_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a numeric vector to the specified number of significant digits; halves will be rounded up. — signif_half_up","text":"x numeric vector round. digits integer indicating number significant digits used.","code":""},{"path":"https://sfirke.github.io/janitor/reference/signif_half_up.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round a numeric vector to the specified number of significant digits; halves will be rounded up. — signif_half_up","text":"","code":"signif_half_up(12.5, 2) #> [1] 13 signif_half_up(1.125, 3) #> [1] 1.13 signif_half_up(-2.5, 1) # negatives get rounded away from zero #> [1] -3"},{"path":"https://sfirke.github.io/janitor/reference/single_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure that a vector has only a single value throughout. — single_value","title":"Ensure that a vector has only a single value throughout. — single_value","text":"Missing values replaced single value, values missing, first value missing used throughout.","code":""},{"path":"https://sfirke.github.io/janitor/reference/single_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure that a vector has only a single value throughout. — single_value","text":"","code":"single_value(x, missing = NA, warn_if_all_missing = FALSE, info = NULL)"},{"path":"https://sfirke.github.io/janitor/reference/single_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure that a vector has only a single value throughout. — single_value","text":"x vector single value missing vector values consider missing x warn_if_all_missing Generate warning values missing? info one value found, append warning error assist determining location issue.","code":""},{"path":"https://sfirke.github.io/janitor/reference/single_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure that a vector has only a single value throughout. — single_value","text":"x scalar single value found throughout (error   one value found).","code":""},{"path":"https://sfirke.github.io/janitor/reference/single_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure that a vector has only a single value throughout. — single_value","text":"","code":"# A simple use case with vectors of input  single_value(c(NA, 1)) #> [1] 1 # Multiple, different values of missing can be given single_value(c(NA, \"a\"), missing = c(NA, \"a\")) #> [1] NA  # A typical use case with a grouped data.frame used for input and the output # (`B` is guaranteed to have a single value and only one row, in this case) data.frame(   A = rep(1:3, each = 2),   B = c(rep(4:6, each = 2)) ) %>%   dplyr::group_by(A) %>%   dplyr::summarize(     B = single_value(B)   ) #> # A tibble: 3 × 2 #>       A     B #>   <int> <int> #> 1     1     4 #> 2     2     5 #> 3     3     6  try(   # info is useful to give when multiple values may be found to see what   # grouping variable or what calculation is causing the error   data.frame(     A = rep(1:3, each = 2),     B = c(rep(1:2, each = 2), 1:2)   ) %>%     dplyr::group_by(A) %>%     dplyr::mutate(       C = single_value(B, info = paste(\"Calculating C for group A=\", A))     ) ) #> Error in dplyr::mutate(., C = single_value(B, info = paste(\"Calculating C for group A=\",  :  #>   ℹ In argument: `C = single_value(B, info = paste(\"Calculating C for #>   group A=\", A))`. #> ℹ In group 3: `A = 3`. #> Caused by error in `single_value()`: #> ! More than one (2) value found (1, 2): Calculating C for group A= 3: Calculating C for group A= 3"},{"path":"https://sfirke.github.io/janitor/reference/tabyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"fully-featured alternative table().  Results data.frames can formatted enhanced janitor's family adorn_ functions. Specify data.frame one, two, three unquoted column names want tabulate.  Three variables generates list 2-way tabyls, split third variable. Alternatively, can tabulate single variable data.frame calling tabyl vector, e.g., tabyl(mtcars$gear).","code":""},{"path":"https://sfirke.github.io/janitor/reference/tabyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"","code":"tabyl(dat, ...)  # S3 method for default tabyl(dat, show_na = TRUE, show_missing_levels = TRUE, ...)  # S3 method for data.frame tabyl(dat, var1, var2, var3, show_na = TRUE, show_missing_levels = TRUE, ...)"},{"path":"https://sfirke.github.io/janitor/reference/tabyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"dat data.frame containing variables wish count.  , vector want tabulate. ... arguments tabyl (just sake documentation compliance, arguments listed vector- data.frame-specific methods) show_na counts NA values displayed?  one-way tabyl, presence NA values triggers additional column showing valid percentages(calculated excluding NA values). show_missing_levels counts missing levels factors displayed?  rows /columns zeroes.  Useful keeping consistent output dimensions even certain factor levels may present data. var1 column name first variable. var2 (optional) column name second variable (rows 2-way tabulation). var3 (optional) column name third variable (list 3-way tabulation).","code":""},{"path":"https://sfirke.github.io/janitor/reference/tabyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"Returns data.frame frequencies percentages tabulated variable(s).  3-way tabulation returns list data.frames.","code":""},{"path":"https://sfirke.github.io/janitor/reference/tabyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a frequency table (1-, 2-, or 3-way). — tabyl","text":"","code":"tabyl(mtcars, cyl) #>  cyl  n percent #>    4 11 0.34375 #>    6  7 0.21875 #>    8 14 0.43750 tabyl(mtcars, cyl, gear) #>  cyl  3 4 5 #>    4  1 8 2 #>    6  2 4 1 #>    8 12 0 2 tabyl(mtcars, cyl, gear, am) #> $`0` #>  cyl  3 4 5 #>    4  1 2 0 #>    6  2 2 0 #>    8 12 0 0 #>  #> $`1` #>  cyl 3 4 5 #>    4 0 6 2 #>    6 0 2 1 #>    8 0 0 2 #>   # or using the %>% pipe mtcars %>%   tabyl(cyl, gear) #>  cyl  3 4 5 #>    4  1 8 2 #>    6  2 4 1 #>    8 12 0 2  # illustrating show_na functionality: my_cars <- rbind(mtcars, rep(NA, 11)) my_cars %>% tabyl(cyl) #>  cyl  n    percent valid_percent #>    4 11 0.33333333       0.34375 #>    6  7 0.21212121       0.21875 #>    8 14 0.42424242       0.43750 #>   NA  1 0.03030303            NA my_cars %>% tabyl(cyl, show_na = FALSE) #>  cyl  n percent #>    4 11 0.34375 #>    6  7 0.21875 #>    8 14 0.43750  # Calling on a single vector not in a data.frame: val <- c(\"hi\", \"med\", \"med\", \"lo\") tabyl(val) #>  val n percent #>   hi 1    0.25 #>   lo 1    0.25 #>  med 2    0.50"},{"path":"https://sfirke.github.io/janitor/reference/top_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"Get frequency table factor variable, grouped categories level.","code":""},{"path":"https://sfirke.github.io/janitor/reference/top_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"","code":"top_levels(input_vec, n = 2, show_na = FALSE)"},{"path":"https://sfirke.github.io/janitor/reference/top_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"input_vec factor variable tabulate. n number levels include top bottom groups show_na cases variable NA shown?","code":""},{"path":"https://sfirke.github.io/janitor/reference/top_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"Returns data.frame (actually tbl_df) frequencies grouped, tabulated variable.  Includes counts percentages, valid percentages (calculated omitting NA values, present vector show_na = TRUE.)","code":""},{"path":"https://sfirke.github.io/janitor/reference/top_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a frequency table of a factor grouped into top-n, bottom-n, and all other levels. — top_levels","text":"","code":"top_levels(as.factor(mtcars$hp), 2) #>                  as.factor(mtcars$hp)  n percent #>                                52, 62  2  0.0625 #>  <<< Middle Group (18 categories) >>> 28  0.8750 #>                              264, 335  2  0.0625"},{"path":"https://sfirke.github.io/janitor/reference/untabyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove tabyl attributes from a data.frame. — untabyl","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"Strips away tabyl-related attributes data.frame.","code":""},{"path":"https://sfirke.github.io/janitor/reference/untabyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"","code":"untabyl(dat)"},{"path":"https://sfirke.github.io/janitor/reference/untabyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"dat data.frame class tabyl.","code":""},{"path":"https://sfirke.github.io/janitor/reference/untabyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"Returns data.frame, without tabyl class attributes.","code":""},{"path":"https://sfirke.github.io/janitor/reference/untabyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove tabyl attributes from a data.frame. — untabyl","text":"","code":"mtcars %>%   tabyl(am) %>%   untabyl() %>%   attributes() # tabyl-specific attributes are gone #> $names #> [1] \"am\"      \"n\"       \"percent\" #>  #> $class #> [1] \"data.frame\" #>  #> $row.names #> [1] 1 2 #>"},{"path":"https://sfirke.github.io/janitor/reference/use_first_valid_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns first non-NA value from a set of vectors. — use_first_valid_of","title":"Returns first non-NA value from a set of vectors. — use_first_valid_of","text":"position input vectors, iterates order returns first non-NA value.  robust replacement common ifelse(!.na(x), x, ifelse(!.na(y), y, z)).  readable handles problems like ifelse's inability work dates way.","code":""},{"path":"https://sfirke.github.io/janitor/reference/use_first_valid_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns first non-NA value from a set of vectors. — use_first_valid_of","text":"","code":"use_first_valid_of(..., if_all_NA = NA)"},{"path":"https://sfirke.github.io/janitor/reference/use_first_valid_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns first non-NA value from a set of vectors. — use_first_valid_of","text":"... input vectors.  Order matters: searched prioritized order supplied. if_all_NA value used vectors return NA certain index?  Default NA.","code":""},{"path":"https://sfirke.github.io/janitor/reference/use_first_valid_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns first non-NA value from a set of vectors. — use_first_valid_of","text":"Returns single vector selected values.","code":""},{"path":"https://sfirke.github.io/janitor/reference/use_first_valid_of.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Returns first non-NA value from a set of vectors. — use_first_valid_of","text":"Deprecated, use new code. Use dplyr::coalesce() instead.","code":""},{"path":[]},{"path":[]},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"breaking-changes-2-2-0-9000","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"janitor 2.2.0.9000 - unreleased development version","text":"minor breaking changes resulting enhancements expected affect vast majority users. using row_to_names(), input values row_number column NA, row_to_names() creates column name \"NA\", character, rather NA. code previously used relied column name NA, now error. fix , rely column name \"NA\".","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"new-features-2-2-0-9000","dir":"Changelog","previous_headings":"","what":"New features","title":"janitor 2.2.0.9000 - unreleased development version","text":"new function paste_skip_na() pastes without including NA values (#537). row_to_names() now accepts multiple rows input, merges using new sep argument (#536). default sep = \"_\". handling multiple NA values, row_to_names() ignores merges non-NA values column names. values NA, row_to_names() creates column name \"NA\", character, rather NA.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-2-2-0-9000","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 2.2.0.9000 - unreleased development version","text":"adorn_totals(\"row\") now succeeds new name totals row already factor level input data.frame (#529, thanks @egozoglu reporting). make_clean_names() longer accepts data.frame tibble input, use clean_names() (fix #532, @billdenney). get_one_to_one() longer errors near-equal values become identical factor levels (fix #543, thanks @olivroy reporting)","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-220-2023-02-02","dir":"Changelog","previous_headings":"","what":"janitor 2.2.0 (2023-02-02)","title":"janitor 2.2.0 (2023-02-02)","text":"CRAN release: 2023-02-02","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"breaking-changes-2-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"janitor 2.2.0 (2023-02-02)","text":"minor breaking changes resulting enhancements expected affect vast majority users. new ... argument added row_to_names(), preceding remove_row argument, part new find_header() functionality. code previously used remove_row unnamed argument, now error. code previously used unsupported behavior passing anything TRUE FALSE remove_row, unexpected results may occur. Microsoft Excel incorrectly leap day 29 February 1900 (see https://docs.microsoft.com/en-us/office/troubleshoot/excel/wrongly-assumes-1900--leap-year). excel_numeric_to_date() account error, now . Dates returned excel_numeric_to_date() precede 1 March 1900 now one day later compared previous versions (.e. 1 Feb 1900 now 2 Feb 1900), dates Excel presents 29 Feb 1900 become .POSIXct(NA). (#423, thanks @billdenney fixing) minor breaking change time zone now always set excel_numeric_to_date() convert_date(). default timezone Sys.timezone(), previously empty string (\"\"). (#422, thanks @billdenney fixing) get_dupes() results now sorted first descending order dupe_count, alphabetically sorting variables. (#493) several minor breaking changes resulting enhancements adorn_ns(): addition new argument format_func means previous calls relying ,,, shorthand get ... column selection argument may now require extra comma. adorn_ns() now defaults displaying numbers >3 digits big.mark = \",\", part default value new format_func argument. E.g., 1234 now 1,234. adorn_ns() longer prints leading whitespace position = \"front\" - visible change printed result rare affects code. first column data.frame input adorn_totals() factor totals row added bottom, column now remains factor, “Total” user-specified totals name added factor levels (#494).","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"new-features-2-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"janitor 2.2.0 (2023-02-02)","text":"row_to_names() now new helper function, find_header() help find row contains names. can used passing row_number=\"find_header\". See documentation row_to_names() find_header() examples. (fix #429) remove_empty() new argument, cutoff allows rows columns removed least cutoff fraction data missing. (fix #446, thanks @jzadra suggesting feature @billdenney fixing) new function sas_numeric_to_date() added convert SAS dates, times, datetimes R objects (fix #475, thanks @billdenney suggesting implementing) new function single_value() added ensure single value missing values present vector (fix #428) new function get_one_to_one() added find columns map 1:1 , even values within columns differ (fix #291, @billdenney) adorn_Ns() contains new format_func argument user can format Ns liking, e.g., changing big.mark character. (#444) clean_names() can now called database connection dbplyr code pipeline (#467)","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"minor-features-2-2-0","dir":"Changelog","previous_headings":"","what":"Minor features","title":"janitor 2.2.0 (2023-02-02)","text":"make_clean_names() (therefore clean_names()) issues warning mu micro symbol names may handled replace argument value. (#448, thanks @IndrajeetPatil reporting @billdenney fixing) rationale standard transliteration convert \"[mu]g\" \"mg\" typically converted \"ug\" use unit. new, unexported constant (janitor:::mu_to_u) added help mu “u” replacements. excel_numeric_to_date() now warns times converted NA due hours exist daylight savings time (fix #420, thanks @Geomorph2 reporting @billdenney fixing). also warns inputs positive, since Excel supports values 1 (#423). tabyl() similar data.frame sorted (e.g., dplyr::arrange()), adorn_totals() /adorn_percentages() called , followed adorn_ns(), Ns sorted correctly match tabyl ’re adorned . (fix #407) clean_names() now supports object types either names dimnames (#481, @DanChaltiel). adorn_pct_formatting() uses locale-dependent value decimal.mark decimal separator, e.g., locales getOption(\"OutDec\") , print percentages format \"12,34%\". character can also set manually options(OutDec = \",\").(#451). adorn_totals(=\"row\") now preserves factor class levels first column input data.frame (#494). make_clean_names() now allows duplicate names returned specifying TRUE new allow_dupes argument (#495, @JasonAizkalns). warning messages now classes can specifically suppressed suppressWarnings(..., class=\"the_class_to_suppress\"). find class warning typically must look code error occurring. (#452, thanks @mgacc0 suggesting @billdenney fixing)","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-2-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 2.2.0 (2023-02-02)","text":"adorn_percentages() refactored compatibility dplyr package versions >= 1.1.0 (#490) numeric variable supplied 2nd variable (column) 3rd variable (list) tabyl, resulting columns list now sorted numeric order, alphabetic. (#438, thanks @daaronr reporting @mattroumaya fixing) tabyl() now succeeds second variable named \"n\" (#445). adorn_ns() can act single-column data.frame input custom Ns supplied variable adorn specified ... (#456). adorn_totals() one_way tabyl preserves tabyl_type attribute subsequent call adorn_pct_formatting() works correctly one-way tabyls (#523).","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-210-2021-01-05","dir":"Changelog","previous_headings":"","what":"janitor 2.1.0 (2021-01-05)","title":"janitor 2.1.0 (2021-01-05)","text":"CRAN release: 2021-01-05","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"new-features-2-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"janitor 2.1.0 (2021-01-05)","text":"adorn_totals() function now accepts special argument fill = NA, insert class-appropriate NA value column isn’t totaled. preserves class column; previously convered character. (thanks @hamstr147 implementing #404 @ymer reporting #298). adorn_totals() now takes value \"\" argument. , adorn_totals(\"\") shorter version adorn_totals(c(\"col\", \"row\")). (#362, thanks @svgsstats implementing @sfd99 suggesting). adorn_totals() now optionally accepts separate name values totals row totals column. default remains single name, \"Total\", applied . now vector two strings passed name parameter, first one used row heading (column 1) second used column heading. (Thanks @francisbarton suggesting #359 implementing #413.)","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 2.1.0 (2021-01-05)","text":"Fixed rounding issue round_half_up() function (#396, thanks @JJSteph) Warnings incomplete argument names fixed (fix #367, thanks @pabecerra reporting @billdenney fixing) 3-way tabyls factors columns rows sorted correct order, factor level (#379). Transliteration extended ASCII (character codes >127) printable ASCII (character codes <=127) now better supported (#389, thanks @dcorynia reporting @billdenney fixing) clean_names called grouped tibble now also changes names grouping variable(s), addition column names (#260, thanks @CerebralMastication reporting tidyverse team fixing). Omitting numeric column tibble using ... select adorn_totals() now succeeds (#388) call make 3-way tabyl() now succeeds first variable class ordered (#386) totals row /column present tabyl result adorn_totals(), functions chisq.test() fisher.test() drop totals print warning proceding calculations (#385).","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-201-2020-04-12","dir":"Changelog","previous_headings":"","what":"janitor 2.0.1 (2020-04-12)","title":"janitor 2.0.1 (2020-04-12)","text":"CRAN release: 2020-04-12","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-and-breaking-changes-2-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes and Breaking changes","title":"janitor 2.0.1 (2020-04-12)","text":"Transliteration characters within make_clean_names() now operates across operating systems, independent differences stringi installations (Fix #365, thanks @eamoncaddigan reporting @billdenney fixing). bug patch represents breaking change way make_clean_names() worked janitor versions 1.2.1.9000 2.0.0 transliterations now generalized follow best-practice approach transliterating ASCII.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-200-2020-04-07","dir":"Changelog","previous_headings":"","what":"janitor 2.0.0 (2020-04-07)","title":"janitor 2.0.0 (2020-04-07)","text":"CRAN release: 2020-04-08","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"breaking-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"janitor 2.0.0 (2020-04-07)","text":"clean_names() make_clean_names() now locale-independent translation ASCII simpler (many cases, Unicode removed, e.g., Greek character “delta” becomes “d”). may also now control substitutions occur add substitutions (like “%” becoming “percent”). result changes, clean names generated functions may break produced prior versions janitor. (Fix #331, thanks @billdenney) part improvements make_clean_names() clean_names(), ... argument added, allowing user pass additional information underlying transformation function snakecase package, to_any_case(). allows greater user control clean_names() / make_clean_names() new functionality like specifying case = \"title\" transforming variable names back title case making plots. adorn_* family functions now allows control columns adorned using ... argument. often-requested feature results small breakage now-redundant argument skip_first_col adorn_percentages() removed. Obsolete functions deprecated: crosstab, adorn_crosstab, use_first_valid_of, convert_to_NA, remove_empty_cols, remove_empty_rows, add_totals_col, add_totals_row.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"major-features-2-0-0","dir":"Changelog","previous_headings":"","what":"Major features","title":"janitor 2.0.0 (2020-04-07)","text":"new functions convert_to_date() convert_to_datetime() generalize work done excel_numeric_to_date() allowing conversion date datetimes many forms input numeric, characters look like numbers, characters look like dates datetimes, Dates, date-times (POSIXt) (#310, thanks @billdenney implementing). instance, succeeds: convert_to_date(c(\"2020-02-29\", \"40000.1\")). new function signif_half_up() rounds numeric vector specified number significant digits halves rounded (#314, thanks @khueyama suggesting implementing). make_clean_names() now allows user specify parts names replaced (Fix #316, thanks @woodwards reporting @woodwards @billdenney implementing) make_clean_names() ensure column names never duplicated (Fix #251, thanks @jzadra reporting @billdenney implementing) clean_names() make_clean_names() generic interface arguments make_clean_names() accessible clean_names() (Fix #339, thanks @ari-nz @billdenney). variables considered function get_dupes() can specified using select helper functions tidyselect. includes -column_name omit variable well matching functions starts_with(), ends_with(), contains(), matches(). See ?tidyselect::select_helpers (#326, thanks @jzadra suggesting implementing).","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"minor-features-2-0-0","dir":"Changelog","previous_headings":"","what":"Minor features","title":"janitor 2.0.0 (2020-04-07)","text":"quiet argument added remove_empty() remove_constant() providing information quiet = 'FALSE' (#70, thanks @jbkunst suggesting @billdenney implementing). row_to_names() works matrix input (#320, thanks @billdenney suggesting implementing clean_names() can now called tbl_graph objects tidygraph package. (#252, thanks @gvdr bringing issue thanks @Tazinho proposing solution).","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 2.0.0 (2020-04-07)","text":"adorn_ns() doesn’t append anything character columns called data.frame resulting call adorn_percentages(). (#195). name argument adorn_totals() correctly applied 3-way tabyls (#306) (thanks @jzadra reporting). adorn_rounding() now works called 3-way tabyl. remove_constant() works correctly tibbles (addition already working data.frames matrices) (thanks @billdenney implementing). get_dupes() works called grouped tibble (#329) (thanks @jzadra fixing). second variable tabyl (column variable) contains empty string \"\", converted \"emptystring_ spread tabyl’s column names. Previously became default variable name V1. (#203). Behind--scenes code changes maintain compatibility breaking changes dplyr 1.0.0, tibble 3.0.0, R 4.0.0.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-121-2020-01-22","dir":"Changelog","previous_headings":"","what":"janitor 1.2.1 (2020-01-22)","title":"janitor 1.2.1 (2020-01-22)","text":"CRAN release: 2020-01-22 Adjusted single test account different error message produced tidyselect package. changes package functionality.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-120-2019-04-20","dir":"Changelog","previous_headings":"","what":"janitor 1.2.0 (2019-04-20)","title":"janitor 1.2.0 (2019-04-20)","text":"CRAN release: 2019-04-21","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"major-features-1-2-0","dir":"Changelog","previous_headings":"","what":"Major features","title":"janitor 1.2.0 (2019-04-20)","text":"new function make_clean_names() takes character vector returns cleaned text, functionality existing clean_names(), runs data.frame, manipulating names. (#197, thanks @tazinho everyone contributed discussion). function can supplied value .name_repair argument as_tibble() tibble package. example: as_tibble(iris, .name_repair = make_clean_names). new function compare_df_cols() compares names classes columns set supplied data.frames tibbles, reporting specific columns similar. common use case set data files specifications , practice, may . companion function compare_df_cols_same() gives TRUE/FALSE result indicating columns (therefore bindable, though FALSE definitive binding fail). helper function describe_class() exported developers wish extend compare_df_ functions treat custom classes appropriately. feature (#50) took almost 3 years conception implementation. Major thanks @billdenney making happen! new function round_to_fraction() allows rounding fraction specified denominator, e.g., nearest 1/7 (#235, thanks @billdenney suggesting & implementing). functions janitor::chisq.test() janitor::fisher.test() enable running statistical tests base stats package two-way tabyl objects. package loading message says base functions masked, base tests still run table objects (#255, thanks @juba implementing). remove_empty() now companion function remove_constant() removes columns containing single unique value, optionally ignoring NA (#222, thanks @billdenney suggesting & implementing).","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"minor-features-1-2-0","dir":"Changelog","previous_headings":"","what":"Minor features","title":"janitor 1.2.0 (2019-04-20)","text":"excel_numeric_to_date() now returns POSIXct object includes time zone. (#225, thanks @billdenney feature.) clean_names() can now called simple features object sf package. (#247, thanks @JosiahParry suggesting & implementing.) adorn_totals() gains argument \"name\" allows user specify value “Total” appear name added row /column (#263). Thanks @StephieLaPugh suggesting @daniel-barnett implementing. remove_empty() remove_constant() now work matrices (returning matrix). (#215) Thanks @jsta reporting @billdenney patching. third variable three-way tabyl factor, resulting list sorted order levels (#250). Empty factor levels 3rd variable still omitted regardless value show_missing_levels.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 1.2.0 (2019-04-20)","text":"excel_numeric_to_date() longer gives overflow error integer input (dates since 1968). (#241) Thanks @hideaki reporting @billdenney patching. clean_names() make_clean_names() now support ‘none’ case option, passed snakecase::to_any_case(). (#269) Thanks @andrewbarros reporting patching.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-111-2018-07-30","dir":"Changelog","previous_headings":"","what":"janitor 1.1.1 (2018-07-30)","title":"janitor 1.1.1 (2018-07-30)","text":"CRAN release: 2018-07-31","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"release-summary-1-1-1","dir":"Changelog","previous_headings":"","what":"Release summary","title":"janitor 1.1.1 (2018-07-30)","text":"Patches bug introduced version 1.1.0 excel_numeric_to_date() fail given input vector containing NA value.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 1.1.1 (2018-07-30)","text":"excel_numeric_to_date() handles NA correctly, version 1.1.0 function error values input vector NA. (#220). Thanks @emilelatour reporting @billdenney patching.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-110-2018-07-17","dir":"Changelog","previous_headings":"","what":"janitor 1.1.0 (2018-07-17)","title":"janitor 1.1.0 (2018-07-17)","text":"CRAN release: 2018-07-18","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"release-summary-1-1-0","dir":"Changelog","previous_headings":"","what":"Release summary","title":"janitor 1.1.0 (2018-07-17)","text":"release requested CRAN address minor package dependency issues. also contains several updates additions described .","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"major-features-1-1-0","dir":"Changelog","previous_headings":"","what":"Major features","title":"janitor 1.1.0 (2018-07-17)","text":"new function row_to_names() handles case dirty data file read names stored row data.frame, rather names. function sets names data.frame row optionally cleans rows including names stored. Thanks @billdenney writing feature.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"minor-features-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor features","title":"janitor 1.1.0 (2018-07-17)","text":"excel_numeric_to_date() can now convert fractions day time, e.g., excel_numeric_to_date(43001.01, include_time = TRUE) returns POSIXlt value \"2017-09-23 00:14:24\". Thanks @billdenney.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"breaking-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"janitor 1.1.0 (2018-07-17)","text":"part excel_numeric_to_date() now handling times, Date-result requested (default behavior include_time = FALSE), fractional part date now removed. printed date identical, internal representation object now contains integer part date. example, old new versions function call excel_numeric_to_date_old(42001.1) return Date object \"2014-12-28\", calling .numeric Date result previously return 16432.1, now returns 16432. improved behavior, now excel_numeric_to_date(42001.1, include_time = FALSE) == .Date(\"2014-12-28\") returns TRUE, previously appear equivalent printed value comparison return FALSE.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-100-2018-03-17","dir":"Changelog","previous_headings":"","what":"janitor 1.0.0 (2018-03-17)","title":"janitor 1.0.0 (2018-03-17)","text":"CRAN release: 2018-03-22","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"release-summary-1-0-0","dir":"Changelog","previous_headings":"","what":"Release summary","title":"janitor 1.0.0 (2018-03-17)","text":"stable version 1.0.0, new tabyl API breaking changes output clean_names(). builds original functionality janitor, similar--improved tools significantly-changed implementation.","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"a-fully-overhauled-tabyl-1-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"A fully-overhauled tabyl","title":"janitor 1.0.0 (2018-03-17)","text":"tabyl() now single function can count combinations one, two, three variables, ala base R’s table(). resulting tabyl data.frames can manipulated formatted using family adorn_ functions. See tabyls vignette . now-redundant legacy functions crosstab() adorn_crosstab() deprecated, remain package now. Existing code relies version tabyl present janitor versions <= 0.3.1 break sort argument used, argument longer exists tabyl (use dplyr::arrange() instead).","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"improvements-to-clean_names-1-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Improvements to clean_names","title":"janitor 1.0.0 (2018-03-17)","text":"clean_names() now detects preserves camelCase inputs, allows multiple options case outputs cleaned names, preserves whether ’s space letters numbers. also transliterates accented letters turns # \"number\". changes may cause old code break. E.g., raw column name variableName now converted variable_name (variableName, VariableName, etc. depending preference), previously converted variablename. minimize inconvenience, ’s quick fix compatibility: can find--replace insert argument case = \"old_janitor\", preserving old behavior clean_names() janitor version 0.3.1 (thus redo scripts beyond .) changes planned clean_names() results stable version 1.0.0 onward.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"major-features-1-0-0","dir":"Changelog","previous_headings":"","what":"Major features","title":"janitor 1.0.0 (2018-03-17)","text":"clean_names() transliterates accented letters, e.g., çãüœ becomes cauoe (#120). Thanks @fernandovmacedo. clean_names() offers multiple options variable name styling. addition snake_case output can select smallCamelCase, BigCamelCase, ALL_CAPS others. (#131). Thanks @tazinho, wrote snakecase package janitor depends , well patch incorporate clean_names(). thanks @maelle proposing feature. Launched janitor documentation website: https://sfirke.github.io/janitor. Thanks pkgdown package. Deprecated functions remove_empty_rows() remove_empty_cols(), replaced single function remove_empty(). (#100) encourage transparency, remove_empty() prints message value supplied argument; suppress , supply value , even ’s default c(\"rows\", \"cols\"). new adorn_title() function adds name 2nd tabyl variable (.e., name column variable). un-tidies data.frame makes result clearer readers (#77)","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"minor-features-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor features","title":"janitor 1.0.0 (2018-03-17)","text":"utility function round_half_up() now exported public use. ’s exact implementation https://stackoverflow.com/questions/12688717/round---5--r/12688836#12688836/, written @mrdwab. tabyl objects now print row numbers suppressed clean_names() now retains character # \"number\" resulting names","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 1.0.0 (2018-03-17)","text":"adorn_totals(\"row\") handles quirky variable names 1st column (#118) get_dupes() returns correct result variable input data.frame already called \"n\" (#162)","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-031-2018-01-04","dir":"Changelog","previous_headings":"","what":"janitor 0.3.1 (2018-01-04)","title":"janitor 0.3.1 (2018-01-04)","text":"CRAN release: 2018-01-04","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"release-summary-0-3-1","dir":"Changelog","previous_headings":"","what":"Release summary","title":"janitor 0.3.1 (2018-01-04)","text":"bug-fix release new functionality changes. fixes bug adorn_crosstab() failed tibble package version > 1.4. Major changes janitor currently development GitHub released soon. next big release.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-030-2017-05-06","dir":"Changelog","previous_headings":"","what":"janitor 0.3.0 (2017-05-06)","title":"janitor 0.3.0 (2017-05-06)","text":"CRAN release: 2017-05-06","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"release-summary-0-3-0","dir":"Changelog","previous_headings":"","what":"Release summary","title":"janitor 0.3.0 (2017-05-06)","text":"primary purpose release maintain accuracy given breaking changes dplyr package, upon janitor built, dplyr version >0.6.0. update also contains number minor improvements. Critical: update package dplyr version >0.6.0, must update janitor version 0.3.0 ensure accurate results janitor’s tabyl() function. due change behavior dplyr’s _join functions (discussed #111). janitor 0.3.0 compatible new version dplyr well old versions dplyr back 0.5.0. , updating janitor 0.3.0 necessitate update dplyr >0.6.0.","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"janitor 0.3.0 (2017-05-06)","text":"functions add_totals_row add_totals_col combined single function, adorn_totals(). (#57). add_totals_ functions now deprecated used. first argument adorn_crosstab() now “dat” instead “crosstab” (indicating function can called data.frame, just result crosstab())","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"major-features-0-3-0","dir":"Changelog","previous_headings":"","what":"Major features","title":"janitor 0.3.0 (2017-05-06)","text":"Exported %>% pipe magrittr (#107). Deprecated following functions: - use_first_valid_of() - use dplyr::coalesce() instead - convert_to_NA() - use dplyr::na_if() instead - add_totals_row() add_totals_col() - replaced single function adorn_totals()","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"minor-features-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor features","title":"janitor 0.3.0 (2017-05-06)","text":"adorn_totals() ns_to_percents() can now called data.frames non-numeric columns beyond first one (columns ignored) (#57) adorn_totals(\"col\") retains factor class 1st column 1st column input data.frame factor","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 0.3.0 (2017-05-06)","text":"clean_names() now handles leading spaces (#85) adorn_crosstab() ns_to_percents() work 2-column data.frame (#89) adorn_totals() now works grouped tibble (#97) Long variable names spaces longer break tabyl() crosstab() (#87) NA_ column result crosstab() appear last column position (#109)","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-021-2016-10-30","dir":"Changelog","previous_headings":"","what":"janitor 0.2.1 (2016-10-30)","title":"janitor 0.2.1 (2016-10-30)","text":"CRAN release: 2016-10-31","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 0.2.1 (2016-10-30)","text":"tabyl() crosstab() now appear package manual (#65) Fixed minor bug per CRAN request - tabyl() crosstab() failed retain ill-formatted variable names using R 3.2.5 Windows (#76) add_totals_row() works two-column data.frame (#69) use_first_valid_of() returns POSIXct-class result given POSIXct inputs","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-020-2016-10-03","dir":"Changelog","previous_headings":"","what":"janitor 0.2.0 (2016-10-03)","title":"janitor 0.2.0 (2016-10-03)","text":"CRAN release: 2016-10-03","code":""},{"path":[]},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"major-0-2-0","dir":"Changelog","previous_headings":"Features","what":"Major","title":"janitor 0.2.0 (2016-10-03)","text":"Submitted CRAN!","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"minor-0-2-0","dir":"Changelog","previous_headings":"Features","what":"Minor","title":"janitor 0.2.0 (2016-10-03)","text":"count tabyl() factor levels aren’t present now 0 instead NA (#48)","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"janitor 0.2.0 (2016-10-03)","text":"Can call tabyl() result tabyl(), e.g., mtcars %>% tabyl(mpg) %>% tabyl(n) (#54) get_dupes() now works variables spaces column names (#62)","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"package-management-0-2-0","dir":"Changelog","previous_headings":"","what":"Package management","title":"janitor 0.2.0 (2016-10-03)","text":"Reached 100% unit test code coverage","code":""},{"path":[]},{"path":[]},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"major-0-1-2","dir":"Changelog","previous_headings":"Features","what":"Major","title":"janitor 0.1.2","text":"Added function adorn_crosstab() formats results crosstab() pretty printing. Shows % N cell, % symbol, user-specified rounding (method number digits), option include totals row /column. E.g., mtcars %>% crosstab(cyl, gear) %>% adorn_crosstab(). crosstab() can called %>% pipeline, e.g., mtcars %>% crosstab(cyl, gear). Thanks @chrishaid (#34) tabyl() can also called %>% pipeline, e.g., mtcars %>% tabyl(cyl) (#35) Added use_first_valid_of() function (#32) Added minor functions manipulating numeric data.frames presentation: ns_to_percents(), add_totals_row(), add_totals_col(),","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"minor-0-1-2","dir":"Changelog","previous_headings":"Features","what":"Minor","title":"janitor 0.1.2","text":"crosstab() returns 0 instead NA instances variable combination. call like tabyl(df$vecname) retains -descriptive $ symbol column name result - want legal R name result, call df %>% tabyl(vecname) Single double quotation marks handled clean_names()","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"package-management-0-1-2","dir":"Changelog","previous_headings":"","what":"Package management","title":"janitor 0.1.2","text":"Added codecov measure test coverage Added unit test coverage Added Travis-CI continuous integration","code":""},{"path":"https://sfirke.github.io/janitor/news/index.html","id":"janitor-01-2016-04-17","dir":"Changelog","previous_headings":"","what":"janitor 0.1 (2016-04-17)","title":"janitor 0.1 (2016-04-17)","text":"Initial draft skeleton package GitHub","code":""}]
